{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOGoA7I7BoghDSVjG4BAq7F",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Abi-Lowkey/MachineLearningTasks/blob/main/9thWeekTasks/Regression%20Model%3A%20SVM%20Regression%20on%20CreditDataset\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Nama : Ketut Satria Wibisana\n",
        "\n",
        "NIM : 1103213148\n",
        "\n",
        "Lecture Midterm : Regression Model: SVM Regression\n",
        "\n",
        "Dataset : CreditDataset\n",
        "\n",
        "\n",
        "Dokumentasi ChatGPT :[Link](https://chatgpt.com/share/6740ce53-3e4c-8005-bbef-b41142d66c99)"
      ],
      "metadata": {
        "id": "vSDma-Ovztf2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Prompt ChatGPT : beri kode untuk connect gcolab dengan gdrive"
      ],
      "metadata": {
        "id": "e8p05ItOGGHG"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ocaHBhGmze5W",
        "outputId": "d1d6af9f-d79b-4a3f-b34a-df183ee2cce4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import (\n",
        "    accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix, classification_report, roc_curve\n",
        ")\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import roc_curve\n"
      ],
      "metadata": {
        "id": "A2JPOVM9Io_p"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Path ke file CSV di Google Drive\n",
        "file_path = '/content/drive/MyDrive/DatasetWeek9/CreditDataset.csv'\n",
        "\n",
        "# Membaca file CSV\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Menampilkan 5 baris pertama\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "id": "jM1vdkKgGSxh",
        "outputId": "0c599991-9682-4149-97b4-aecd6fae9683"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    x1  x2   x3   x4    x5   x6   x7  x8   x9   x10  ...   x12 x13   x14  \\\n",
              "0  A11   6  A34  A43  1169  A65  A75   4  A93  A101  ...  A121  67  A143   \n",
              "1  A12  48  A32  A43  5951  A61  A73   2  A92  A101  ...  A121  22  A143   \n",
              "2  A14  12  A34  A46  2096  A61  A74   2  A93  A101  ...  A121  49  A143   \n",
              "3  A11  42  A32  A42  7882  A61  A74   2  A93  A103  ...  A122  45  A143   \n",
              "4  A11  24  A33  A40  4870  A61  A73   3  A93  A101  ...  A124  53  A143   \n",
              "\n",
              "    x15 x16   x17 x18   x19   x20 Class  \n",
              "0  A152   2  A173   1  A192  A201     1  \n",
              "1  A152   1  A173   1  A191  A201     2  \n",
              "2  A152   1  A172   2  A191  A201     1  \n",
              "3  A153   1  A173   2  A191  A201     1  \n",
              "4  A153   2  A173   2  A191  A201     2  \n",
              "\n",
              "[5 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-713f3077-d2bd-4319-b0d4-e22611ac2072\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x1</th>\n",
              "      <th>x2</th>\n",
              "      <th>x3</th>\n",
              "      <th>x4</th>\n",
              "      <th>x5</th>\n",
              "      <th>x6</th>\n",
              "      <th>x7</th>\n",
              "      <th>x8</th>\n",
              "      <th>x9</th>\n",
              "      <th>x10</th>\n",
              "      <th>...</th>\n",
              "      <th>x12</th>\n",
              "      <th>x13</th>\n",
              "      <th>x14</th>\n",
              "      <th>x15</th>\n",
              "      <th>x16</th>\n",
              "      <th>x17</th>\n",
              "      <th>x18</th>\n",
              "      <th>x19</th>\n",
              "      <th>x20</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>A11</td>\n",
              "      <td>6</td>\n",
              "      <td>A34</td>\n",
              "      <td>A43</td>\n",
              "      <td>1169</td>\n",
              "      <td>A65</td>\n",
              "      <td>A75</td>\n",
              "      <td>4</td>\n",
              "      <td>A93</td>\n",
              "      <td>A101</td>\n",
              "      <td>...</td>\n",
              "      <td>A121</td>\n",
              "      <td>67</td>\n",
              "      <td>A143</td>\n",
              "      <td>A152</td>\n",
              "      <td>2</td>\n",
              "      <td>A173</td>\n",
              "      <td>1</td>\n",
              "      <td>A192</td>\n",
              "      <td>A201</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>A12</td>\n",
              "      <td>48</td>\n",
              "      <td>A32</td>\n",
              "      <td>A43</td>\n",
              "      <td>5951</td>\n",
              "      <td>A61</td>\n",
              "      <td>A73</td>\n",
              "      <td>2</td>\n",
              "      <td>A92</td>\n",
              "      <td>A101</td>\n",
              "      <td>...</td>\n",
              "      <td>A121</td>\n",
              "      <td>22</td>\n",
              "      <td>A143</td>\n",
              "      <td>A152</td>\n",
              "      <td>1</td>\n",
              "      <td>A173</td>\n",
              "      <td>1</td>\n",
              "      <td>A191</td>\n",
              "      <td>A201</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>A14</td>\n",
              "      <td>12</td>\n",
              "      <td>A34</td>\n",
              "      <td>A46</td>\n",
              "      <td>2096</td>\n",
              "      <td>A61</td>\n",
              "      <td>A74</td>\n",
              "      <td>2</td>\n",
              "      <td>A93</td>\n",
              "      <td>A101</td>\n",
              "      <td>...</td>\n",
              "      <td>A121</td>\n",
              "      <td>49</td>\n",
              "      <td>A143</td>\n",
              "      <td>A152</td>\n",
              "      <td>1</td>\n",
              "      <td>A172</td>\n",
              "      <td>2</td>\n",
              "      <td>A191</td>\n",
              "      <td>A201</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>A11</td>\n",
              "      <td>42</td>\n",
              "      <td>A32</td>\n",
              "      <td>A42</td>\n",
              "      <td>7882</td>\n",
              "      <td>A61</td>\n",
              "      <td>A74</td>\n",
              "      <td>2</td>\n",
              "      <td>A93</td>\n",
              "      <td>A103</td>\n",
              "      <td>...</td>\n",
              "      <td>A122</td>\n",
              "      <td>45</td>\n",
              "      <td>A143</td>\n",
              "      <td>A153</td>\n",
              "      <td>1</td>\n",
              "      <td>A173</td>\n",
              "      <td>2</td>\n",
              "      <td>A191</td>\n",
              "      <td>A201</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>A11</td>\n",
              "      <td>24</td>\n",
              "      <td>A33</td>\n",
              "      <td>A40</td>\n",
              "      <td>4870</td>\n",
              "      <td>A61</td>\n",
              "      <td>A73</td>\n",
              "      <td>3</td>\n",
              "      <td>A93</td>\n",
              "      <td>A101</td>\n",
              "      <td>...</td>\n",
              "      <td>A124</td>\n",
              "      <td>53</td>\n",
              "      <td>A143</td>\n",
              "      <td>A153</td>\n",
              "      <td>2</td>\n",
              "      <td>A173</td>\n",
              "      <td>2</td>\n",
              "      <td>A191</td>\n",
              "      <td>A201</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-713f3077-d2bd-4319-b0d4-e22611ac2072')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-713f3077-d2bd-4319-b0d4-e22611ac2072 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-713f3077-d2bd-4319-b0d4-e22611ac2072');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-29279237-c46e-40d6-8dca-0bb94dbdf3ce\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-29279237-c46e-40d6-8dca-0bb94dbdf3ce')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-29279237-c46e-40d6-8dca-0bb94dbdf3ce button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ta3eFnh1GveD",
        "outputId": "f958b38b-c3e6-42b4-efe2-77d463f6c0e7"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1000 entries, 0 to 999\n",
            "Data columns (total 21 columns):\n",
            " #   Column  Non-Null Count  Dtype \n",
            "---  ------  --------------  ----- \n",
            " 0   x1      1000 non-null   object\n",
            " 1   x2      1000 non-null   int64 \n",
            " 2   x3      1000 non-null   object\n",
            " 3   x4      1000 non-null   object\n",
            " 4   x5      1000 non-null   int64 \n",
            " 5   x6      1000 non-null   object\n",
            " 6   x7      1000 non-null   object\n",
            " 7   x8      1000 non-null   int64 \n",
            " 8   x9      1000 non-null   object\n",
            " 9   x10     1000 non-null   object\n",
            " 10  x11     1000 non-null   int64 \n",
            " 11  x12     1000 non-null   object\n",
            " 12  x13     1000 non-null   int64 \n",
            " 13  x14     1000 non-null   object\n",
            " 14  x15     1000 non-null   object\n",
            " 15  x16     1000 non-null   int64 \n",
            " 16  x17     1000 non-null   object\n",
            " 17  x18     1000 non-null   int64 \n",
            " 18  x19     1000 non-null   object\n",
            " 19  x20     1000 non-null   object\n",
            " 20  Class   1000 non-null   int64 \n",
            "dtypes: int64(8), object(13)\n",
            "memory usage: 164.2+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "pz_VV_-iGz7t",
        "outputId": "361cf8a7-70f3-4f9d-e4a8-5f167c578fb8"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                x2            x5           x8          x11          x13  \\\n",
              "count  1000.000000   1000.000000  1000.000000  1000.000000  1000.000000   \n",
              "mean     20.903000   3271.258000     2.973000     2.845000    35.546000   \n",
              "std      12.058814   2822.736876     1.118715     1.103718    11.375469   \n",
              "min       4.000000    250.000000     1.000000     1.000000    19.000000   \n",
              "25%      12.000000   1365.500000     2.000000     2.000000    27.000000   \n",
              "50%      18.000000   2319.500000     3.000000     3.000000    33.000000   \n",
              "75%      24.000000   3972.250000     4.000000     4.000000    42.000000   \n",
              "max      72.000000  18424.000000     4.000000     4.000000    75.000000   \n",
              "\n",
              "               x16          x18        Class  \n",
              "count  1000.000000  1000.000000  1000.000000  \n",
              "mean      1.407000     1.155000     1.300000  \n",
              "std       0.577654     0.362086     0.458487  \n",
              "min       1.000000     1.000000     1.000000  \n",
              "25%       1.000000     1.000000     1.000000  \n",
              "50%       1.000000     1.000000     1.000000  \n",
              "75%       2.000000     1.000000     2.000000  \n",
              "max       4.000000     2.000000     2.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b275f7f0-b580-45aa-8851-89202843dbac\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x2</th>\n",
              "      <th>x5</th>\n",
              "      <th>x8</th>\n",
              "      <th>x11</th>\n",
              "      <th>x13</th>\n",
              "      <th>x16</th>\n",
              "      <th>x18</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>20.903000</td>\n",
              "      <td>3271.258000</td>\n",
              "      <td>2.973000</td>\n",
              "      <td>2.845000</td>\n",
              "      <td>35.546000</td>\n",
              "      <td>1.407000</td>\n",
              "      <td>1.155000</td>\n",
              "      <td>1.300000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>12.058814</td>\n",
              "      <td>2822.736876</td>\n",
              "      <td>1.118715</td>\n",
              "      <td>1.103718</td>\n",
              "      <td>11.375469</td>\n",
              "      <td>0.577654</td>\n",
              "      <td>0.362086</td>\n",
              "      <td>0.458487</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>4.000000</td>\n",
              "      <td>250.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>19.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>12.000000</td>\n",
              "      <td>1365.500000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>27.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>18.000000</td>\n",
              "      <td>2319.500000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>33.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>24.000000</td>\n",
              "      <td>3972.250000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>42.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>72.000000</td>\n",
              "      <td>18424.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>75.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b275f7f0-b580-45aa-8851-89202843dbac')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b275f7f0-b580-45aa-8851-89202843dbac button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b275f7f0-b580-45aa-8851-89202843dbac');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-625f15f4-276a-4cc7-bfe6-958821a3c36d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-625f15f4-276a-4cc7-bfe6-958821a3c36d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-625f15f4-276a-4cc7-bfe6-958821a3c36d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"x2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 345.9492794534648,\n        \"min\": 4.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          20.903,\n          18.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5886.3378690311465,\n        \"min\": 250.0,\n        \"max\": 18424.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3271.258,\n          2319.5,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 352.6415111727615,\n        \"min\": 1.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1000.0,\n          2.973,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x11\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 352.648725096441,\n        \"min\": 1.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1000.0,\n          2.845,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x13\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 341.81327343426176,\n        \"min\": 11.375468574317502,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          35.546,\n          33.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x16\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.0002158816418,\n        \"min\": 0.5776544682460991,\n        \"max\": 1000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1000.0,\n          1.407,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x18\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.1740021102216,\n        \"min\": 0.36208577175319234,\n        \"max\": 1000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.155,\n          2.0,\n          0.36208577175319234\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Class\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.11141293326966,\n        \"min\": 0.45848687027025403,\n        \"max\": 1000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.3,\n          2.0,\n          0.45848687027025403\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Misalnya 'Class' adalah target\n",
        "X = df.drop('Class', axis=1)\n",
        "y = df['Class']\n",
        "\n",
        "# Konversi fitur kategorikal menjadi one-hot encoding atau label encoding\n",
        "X = pd.get_dummies(X)\n",
        "\n",
        "# Split data menjadi training dan testing\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "id": "_-5_bKNyIuWE"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Membuat model RandomForestClassifier dengan random_state untuk reproduksi hasil\n",
        "model = RandomForestClassifier(random_state=42)\n",
        "\n",
        "# Melatih model dengan data pelatihan (X_train untuk fitur dan y_train untuk target)\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Menggunakan model terlatih untuk memprediksi kelas (label) pada data uji (X_test)\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Mendapatkan probabilitas prediksi untuk setiap kelas (mengambil kolom kedua untuk kelas positif)\n",
        "y_pred_prob = model.predict_proba(X_test)[:, 1]  # Probabilitas untuk ROC-AUC\n",
        "\n"
      ],
      "metadata": {
        "id": "aIDHLGYGI3y0"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Menghitung Akurasi: Persentase prediksi yang benar dari total prediksi yang dilakukan\n",
        "acc = accuracy_score(y_test, y_pred)\n",
        "\n",
        "# Menghitung Presisi: Proporsi prediksi positif yang benar (bobot berdasarkan jumlah masing-masing kelas)\n",
        "prec = precision_score(y_test, y_pred, average='weighted')\n",
        "\n",
        "# Menghitung Recall: Proporsi kasus positif yang berhasil terdeteksi (bobot berdasarkan jumlah masing-masing kelas)\n",
        "rec = recall_score(y_test, y_pred, average='weighted')\n",
        "\n",
        "# Menghitung F1-Score: Rata-rata harmonis antara Presisi dan Recall (bobot berdasarkan jumlah masing-masing kelas)\n",
        "f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "\n",
        "# Menampilkan hasil Akurasi\n",
        "print(f\"Akurasi: {acc:.2f}\")\n",
        "\n",
        "# Menampilkan hasil Presisi\n",
        "print(f\"Presisi: {prec:.2f}\")\n",
        "\n",
        "# Menampilkan hasil Recall\n",
        "print(f\"Recall: {rec:.2f}\")\n",
        "\n",
        "# Menampilkan hasil F1-Score\n",
        "print(f\"F1-Score: {f1:.2f}\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hDsBedn7I8Hc",
        "outputId": "d4a23827-eaf5-4f61-c6c3-81f0e21cb4a4"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Akurasi: 0.80\n",
            "Presisi: 0.79\n",
            "Recall: 0.80\n",
            "F1-Score: 0.77\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menghitung AUC-ROC (Area Under the Curve - Receiver Operating Characteristic)\n",
        "auc = roc_auc_score(y_test, y_pred_prob)\n",
        "\n",
        "# Menampilkan nilai AUC-ROC\n",
        "print(f\"AUC-ROC: {auc:.2f}\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FPb41qXvI91V",
        "outputId": "0444838a-7c0e-4b7a-8420-5ff1e94ccbea"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC-ROC: 0.83\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menghitung Confusion Matrix: Matriks yang menunjukkan jumlah prediksi yang benar dan salah untuk setiap kelas\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "# Menampilkan Confusion Matrix\n",
        "print(\"Confusion Matrix:\")\n",
        "print(cm)\n",
        "\n",
        "# Menghitung Classification Report: Menyediakan metrik evaluasi seperti presisi, recall, f1-score untuk setiap kelas\n",
        "report = classification_report(y_test, y_pred)\n",
        "\n",
        "# Menampilkan Classification Report\n",
        "print(\"Classification Report:\")\n",
        "print(report)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F806UPmmJIA1",
        "outputId": "5a6a5809-43e2-48b4-b46b-9ecbf9fdf912"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion Matrix:\n",
            "[[134   7]\n",
            " [ 34  25]]\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.80      0.95      0.87       141\n",
            "           2       0.78      0.42      0.55        59\n",
            "\n",
            "    accuracy                           0.80       200\n",
            "   macro avg       0.79      0.69      0.71       200\n",
            "weighted avg       0.79      0.80      0.77       200\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menghitung nilai False Positive Rate (FPR), True Positive Rate (TPR), dan thresholds untuk ROC curve\n",
        "fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob, pos_label=2)\n",
        "\n",
        "# Membuat grafik ROC curve dengan ukuran figure 8x6 inci\n",
        "plt.figure(figsize=(8, 6))\n",
        "\n",
        "# Plot ROC curve berdasarkan FPR (False Positive Rate) dan TPR (True Positive Rate)\n",
        "plt.plot(fpr, tpr, label=f\"AUC = {roc_auc_score(y_test, y_pred_prob):.2f}\")\n",
        "\n",
        "# Menambahkan garis diagonal untuk \"No Skill\" (model acak)\n",
        "plt.plot([0, 1], [0, 1], 'k--', label=\"No Skill\")\n",
        "\n",
        "# Menambahkan label pada sumbu X dan Y\n",
        "plt.xlabel(\"False Positive Rate\")\n",
        "plt.ylabel(\"True Positive Rate\")\n",
        "\n",
        "# Menambahkan judul pada grafik\n",
        "plt.title(\"ROC Curve\")\n",
        "\n",
        "# Menambahkan legenda\n",
        "plt.legend()\n",
        "\n",
        "# Menampilkan grafik\n",
        "plt.show()\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "9_6l8TR4JJlE",
        "outputId": "07cf9617-22b8-4e3a-d416-ff4c8c89a35f"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAArMAAAIjCAYAAAAQgZNYAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAACIFElEQVR4nOzdd1hT5wIG8DcJWwRUZIqAA7eiiHtLxVmtVnBV3HtrrXvvVW0dtC7cQq1aW61Wca+qCE4EBy6miOydnPuH17RUVILAScj7ex6e25yck7y5QXj58p3vSARBEEBEREREpIGkYgcgIiIiIsovllkiIiIi0lgss0RERESksVhmiYiIiEhjscwSERERkcZimSUiIiIijcUyS0REREQai2WWiIiIiDQWyywRERERaSyWWSIiIiLSWCyzRES58PHxgUQiUX7p6OjA1tYWAwYMQHh4eK7HCIKAXbt2oUWLFjAzM4ORkRFq1aqFBQsWICUl5YPPdejQIXTo0AHm5ubQ09ODjY0NPDw8cPr06TxlTU9Px/fff4+GDRvC1NQUBgYGcHJywpgxYxAaGpqv109EpCkkgiAIYocgIlI3Pj4+GDhwIBYsWABHR0ekp6fj6tWr8PHxgYODA+7evQsDAwPl/nK5HH369IGfnx+aN2+O7t27w8jICBcuXMDevXtRvXp1nDp1CpaWlspjBEHAoEGD4OPjg7p16+Lrr7+GlZUVIiMjcejQIQQEBODSpUto0qTJB3PGxsaiffv2CAgIQOfOneHm5gZjY2OEhIRg//79iIqKQmZmZqH+f0VEJCqBiIjes337dgGAcP369Rzbv/vuOwGA4Ovrm2P7kiVLBADClClT3nusI0eOCFKpVGjfvn2O7StXrhQACBMmTBAUCsV7x+3cuVP4+++/P5qzU6dOglQqFQ4cOPDefenp6cLkyZM/enxeZWVlCRkZGQXyWEREBYnTDIiIVNC8eXMAwOPHj5Xb0tLSsHLlSjg5OWHp0qXvHdOlSxd4eXnh+PHjuHr1qvKYpUuXomrVqli1ahUkEsl7x33zzTdo0KDBB7P8/fffOHr0KAYPHowePXq8d7++vj5WrVqlvN2qVSu0atXqvf0GDBgABwcH5e2nT59CIpFg1apVWLt2LSpWrAh9fX0EBgZCR0cH8+fPf+8xQkJCIJFIsH79euW2+Ph4TJgwAXZ2dtDX10elSpWwfPlyKBSKD74mIiJVscwSEang6dOnAIBSpUopt128eBFv3rxBnz59oKOjk+tx/fv3BwD88ccfymPi4uLQp08fyGSyfGU5cuQIgLeltzBs374dP/74I4YNG4bVq1fD2toaLVu2hJ+f33v7+vr6QiaToWfPngCA1NRUtGzZErt370b//v3xww8/oGnTppg+fTomTZpUKHmJSDvl/lOXiIgAAAkJCYiNjUV6ejr+/vtvzJ8/H/r6+ujcubNyn/v37wMA6tSp88HHeXdfcHBwjv+tVatWvrMVxGN8zMuXL/Ho0SOULVtWuc3T0xPDhw/H3bt3UbNmTeV2X19ftGzZUjkneM2aNXj8+DECAwNRuXJlAMDw4cNhY2ODlStXYvLkybCzsyuU3ESkXTgyS0T0EW5ubihbtizs7Ozw9ddfo0SJEjhy5AjKlSun3CcpKQkAULJkyQ8+zrv7EhMTc/zvx475lIJ4jI/p0aNHjiILAN27d4eOjg58fX2V2+7evYv79+/D09NTue2XX35B8+bNUapUKcTGxiq/3NzcIJfLcf78+ULJTETahyOzREQfsWHDBjg5OSEhIQHbtm3D+fPnoa+vn2Ofd2XyXanNzX8Lr4mJySeP+ZR/P4aZmVm+H+dDHB0d39tmbm6Otm3bws/PDwsXLgTwdlRWR0cH3bt3V+738OFD3L59+70y/E5MTEyB5yUi7cQyS0T0EQ0aNED9+vUBAN26dUOzZs3Qp08fhISEwNjYGABQrVo1AMDt27fRrVu3XB/n9u3bAIDq1asDAKpWrQoAuHPnzgeP+ZR/P8a7E9M+RiKRQMhlNUa5XJ7r/oaGhrlu79WrFwYOHIigoCA4OzvDz88Pbdu2hbm5uXIfhUKBL774AlOnTs31MZycnD6Zl4goLzjNgIgoj2QyGZYuXYqIiIgcZ+03a9YMZmZm2Lt37weL4c6dOwFAOde2WbNmKFWqFPbt2/fBYz6lS5cuAIDdu3fnaf9SpUohPj7+ve3Pnj1T6Xm7desGPT09+Pr6IigoCKGhoejVq1eOfSpWrIjk5GS4ubnl+lW+fHmVnpOI6ENYZomIVNCqVSs0aNAAa9euRXp6OgDAyMgIU6ZMQUhICGbOnPneMUePHoWPjw/c3d3RqFEj5THfffcdgoOD8d133+U6Yrp7925cu3btg1kaN26M9u3bY8uWLTh8+PB792dmZmLKlCnK2xUrVsSDBw/w6tUr5bZbt27h0qVLeX79AGBmZgZ3d3f4+flh//790NPTe2902cPDA1euXMGJEyfeOz4+Ph7Z2dkqPScR0YfwCmBERLl4dwWw69evK6cZvHPgwAH07NkTmzZtwogRIwC8/aje09MTv/76K1q0aIEePXrA0NAQFy9exO7du1GtWjX4+/vnuAKYQqHAgAEDsGvXLtSrV095BbCoqCgcPnwY165dw+XLl9G4ceMP5nz16hXatWuHW7duoUuXLmjbti1KlCiBhw8fYv/+/YiMjERGRgaAt6sf1KxZE3Xq1MHgwYMRExMDb29vWFpaIjExUbns2NOnT+Ho6IiVK1fmKMP/tmfPHvTr1w8lS5ZEq1atlMuEvZOamormzZvj9u3bGDBgAFxcXJCSkoI7d+7gwIEDePr0aY5pCURE+SbuNRuIiNTTh64AJgiCIJfLhYoVKwoVK1YUsrOzc2zfvn270LRpU8HExEQwMDAQatSoIcyfP19ITk7+4HMdOHBAaNeunVC6dGlBR0dHsLa2Fjw9PYWzZ8/mKWtqaqqwatUqwdXVVTA2Nhb09PSEypUrC2PHjhUePXqUY9/du3cLFSpUEPT09ARnZ2fhxIkTgpeXl2Bvb6/cJywsTAAgrFy58oPPmZiYKBgaGgoAhN27d+e6T1JSkjB9+nShUqVKgp6enmBubi40adJEWLVqlZCZmZmn10ZE9CkcmSUiIiIijcU5s0RERESksVhmiYiIiEhjscwSERERkcZimSUiIiIijcUyS0REREQai2WWiIiIiDSWjtgBippCoUBERARKliwJiUQidhwiIiIi+g9BEJCUlAQbGxtIpR8fe9W6MhsREQE7OzuxYxARERHRJ7x48QLlypX76D5aV2ZLliwJ4O3/OSYmJiKnISIiIqL/SkxMhJ2dnbK3fYzWldl3UwtMTExYZomIiIjUWF6mhPIEMCIiIiLSWCyzRERERKSxWGaJiIiISGNp3ZzZvBAEAdnZ2ZDL5WJHIRHIZDLo6Ohw6TYiIiINwDL7H5mZmYiMjERqaqrYUUhERkZGsLa2hp6enthRiIiI6CNYZv9FoVAgLCwMMpkMNjY20NPT4+iclhEEAZmZmXj16hXCwsJQuXLlTy7WTEREROJhmf2XzMxMKBQK2NnZwcjISOw4JBJDQ0Po6uri2bNnyMzMhIGBgdiRiIiI6AM45JQLjsQRvweIiIg0A39jExEREZHGYpklIiIiIo3FMktEREREGotltpi5cuUKZDIZOnXq9N59Z8+ehUQiQXx8/Hv3OTg4YO3atTm2nTlzBh07dkSZMmVgZGSE6tWrY/LkyQgPDy+k9EB6ejpGjx6NMmXKwNjYGD169EB0dPRHj0lOTsaYMWNQrlw5GBoaonr16vD29s6xz/Dhw1GxYkUYGhqibNmy6Nq1Kx48eFBor4OIiIiKBstsMbN161aMHTsW58+fR0RERL4f56effoKbmxusrKzw66+/4v79+/D29kZCQgJWr15dgIlzmjhxIn7//Xf88ssvOHfuHCIiItC9e/ePHjNp0iQcP34cu3fvRnBwMCZMmIAxY8bgyJEjyn1cXFywfft2BAcH48SJExAEAe3ateOFMYiIiDQcl+b6BEEQkJYlTuEx1JWptM5tcnIyfH19cePGDURFRcHHxwczZsxQ+XlfvnyJcePGYdy4cfj++++V2x0cHNCiRYtcR3YLQkJCArZu3Yq9e/eiTZs2AIDt27ejWrVquHr1Kho1apTrcZcvX4aXlxdatWoFABg2bBh++uknXLt2DV9++aVy279fx6JFi1CnTh08ffoUFStWLJTXQ0RERIVP1DJ7/vx5rFy5EgEBAYiMjMShQ4fQrVu3jx5z9uxZTJo0Cffu3YOdnR1mzZqFAQMGFFrGtCw5qs85UWiP/zH3F7jDSC/vb5Gfnx+qVq2KKlWqoF+/fpgwYQKmT5+u8oUffvnlF2RmZmLq1Km53m9mZvbBYzt06IALFy588H57e3vcu3cv1/sCAgKQlZUFNzc35baqVauifPnyuHLlygfLbJMmTXDkyBEMGjQINjY2OHv2LEJDQ3MU8X9LSUnB9u3b4ejoCDs7uw9mJSIiIvUnaplNSUlBnTp1MGjQoE9+lAwAYWFh6NSpE0aMGIE9e/bA398fQ4YMgbW1Ndzd3YsgsXrbunUr+vXrBwBo3749EhIScO7cOeWIZV49fPgQJiYmsLa2VjnDli1bkJaW9sH7dXV1P3hfVFQU9PT03ivLlpaWiIqK+uBxP/74I4YNG4Zy5cpBR0cHUqkUmzdvRosWLXLst3HjRkydOhUpKSmoUqUKTp48ycvVEhERaThRy2yHDh3QoUOHPO/v7e0NR0dH5ZzNatWq4eLFi/j+++8Lrcwa6spwf4E4RdlQV5bnfUNCQnDt2jUcOnQIAKCjowNPT09s3bpV5TIrCEK+L+Nra2ubr+M+x48//oirV6/iyJEjsLe3x/nz5zF69GjY2NjkGOXt27cvvvjiC0RGRmLVqlXw8PDApUuXeIUvIqJcvIhLxb2IBLFjkJqQZ2dDpqOD5pXLooS+es1SVa80n3DlypUc5QQA3N3dMWHChA8ek5GRgYyMDOXtxMRElZ5TIpGo9FG/WLZu3Yrs7GzY2NgotwmCAH19faxfvx6mpqYwMTEB8HZu6n9HP+Pj42FqagoAcHJyQkJCAiIjI1Uenf2caQZWVlbIzMxEfHx8jnzR0dGwsrLK9Zi0tDTMmDEDhw4dUq7gULt2bQQFBWHVqlU5vl9MTU1hamqKypUro1GjRihVqhQOHTqE3r17q/QaiYiKK0EQcPP5G2y5EIYT96KgEMRORGITBAHJt/9C0vXfYNVvBS7M7swy+zmioqJgaWmZY5ulpSUSExORlpYGQ0PD945ZunQp5s+fX1QRRZGdnY2dO3di9erVaNeuXY77unXrhn379mHEiBGoXLkypFIpAgICYG9vr9znyZMnSEhIgJOTEwDg66+/xrRp07BixYpc553+t2z+2+dMM3BxcYGuri78/f3Ro0cPAG9HnJ8/f47GjRvnekxWVhaysrLeu/ysTCaDQqH44HMJggBBEHL8oUNEpK2y5QocvxeFLRfCEPQiXrm9ho2JSp8SUvGSlZ6CwL0rEXfjJADAJOwM9HW6ipzqfRpVZvNj+vTpmDRpkvJ2YmJisTvp548//sCbN28wePBg5ejqOz169MDWrVsxYsQIlCxZEkOGDMHkyZOho6ODWrVq4cWLF/juu+/QqFEjNGnSBABgZ2eH77//HmPGjEFiYiL69+8PBwcHvHz5Ejt37oSxsfEHl+f6nGkGpqamGDx4MCZNmoTSpUvDxMQEY8eORePGjXOc/FW1alUsXboUX331FUxMTNCyZUt8++23MDQ0hL29Pc6dO4edO3dizZo1AN6WdV9fX7Rr1w5ly5bFy5cvsWzZMhgaGqJjx475zktEpOkS07Pgd/0Ftl96ivD4twMRejIpvqpri0HNHFHFqqTICUksQUFB8PAYgBcPH0Imk2Hx4sX49ttv3xs8UgcaVWatrKzeW0A/OjoaJiYmuY7KAoC+vj709fWLIp5otm7dCjc3t/eKLPC2zK5YsQK3b99G7dq1sW7dOixbtgzfffcdnj17BisrK3zxxRdYvHhxjnmyo0aNgpOTE1atWoWvvvoKaWlpcHBwQOfOnXP8cVDQvv/+e0ilUvTo0QMZGRlwd3fHxo0bc+wTEhKChIR/5nHt378f06dPR9++fREXFwd7e3ssXrwYI0aMAAAYGBjgwoULWLt2Ld68eQNLS0u0aNECly9fhoWFRaG9FiIidfUiLhXbLz2F340XSM7IBgCUKaGHfo3s0a+RPcqWLN6/N+nDBEGAt7c3Jk6ciIyMDNjZ2WH//v3KAS91JBEEQS1mxEgkkk8uzfXdd9/h2LFjuHPnjnJbnz59EBcXh+PHj+fpeRITE2FqaoqEhATlHNJ30tPTERYWBkdHR54UpOX4vUBExVHAszfYevEJjt/9Zz5sJQtjDGnmiG51bWHAKQVa7+HDh6hRowaysrLQpUsXbN++HWXKlCnyHB/ra/8l6shscnIyHj16pLwdFhaGoKAglC5dGuXLl8f06dMRHh6OnTt3AgBGjBiB9evXY+rUqRg0aBBOnz4NPz8/HD16VKyXQEREpNay5QqcuBeNLRefIPB5vHJ788rmGNzMES2dyuZ7BRsqfipXrow1a9YgKysLEyZM0IjvDVHL7I0bN9C6dWvl7XcfX3t5ecHHxweRkZF4/vy58n5HR0ccPXoUEydOxLp161CuXDls2bKFa8wSERH9x6ukDPwWFP7efNiuzjYY3NwRVa0+PtpF2kEQBKxfvx7NmzeHs7MzAGDMmDHihlKRqGW2VatW+NgsBx8fn1yPCQwMLMRUREREmiU6MR13wxNwJzwBd8MTcDc8EVGJ6cr7S5fQQ7+G5dGvsT0sSnLqFL317uTxQ4cOoXLlyggMDESJEiXEjqUyjToBjIiISJsJgoCoxHTcefn/0hqRiDvhCXiV9P4ygxIJUNXKBP0b2+Mrzoel//j777/h6emJZ8+eQU9PD+PGjYORkZHYsfKFZZaIiEgNCYKA8Pg05UjrnfAE3ItIQGxy5nv7SiVAxbLGqGVripr//6puYwJjNVvcnsQnCALWrFmDadOmITs7GxUrVoSvry9cXFzEjpZv/C4nIiISmSAIeBGXhrsR/54qkIA3qVnv7SuTSlDZwvhtabUxQa1ypqhmbaIRV6skcSUnJ6N37974448/AAAeHh7YvHnzJ1cLUHf8ziciIipCCoWA53Gp/5TWiLcjrwlp7xdXHakETpYl/z/iaoKatm+LK6cMUH4YGRkhIyMD+vr6WLduHYYNG6YRqxV8CsssERFRIVEoBIS9TlGOtL6dKpCIpPTs9/bVk0lRxaqksrTWsjWFk2VJFlf6LAqFAllZWdDX14dUKsWuXbsQFRWFOnXqiB2twLDMEhER4W3xjE/L+ugqO5/yJjUTd8ITcOdlIu5GJOB+RKLyClv/pqcjRTVrk7fTBP4/x9XJsiT0dNTvUqGkuWJiYtC/f3+UL18eP//8MwDA0tISlpaWIicrWCyzVCBatWoFZ2dnrF27Ntf7BwwYgPj4eBw+fDjX/R0cHDBhwgRMmDChSPISEb0THJmIw4HhOHIrApEJ6Z8+QEUGum+Lq/LkLBtTVLY0hq6MxZUKz7lz59C7d29ERkbC0NAQ06dPh6Ojo9ixCgXLbDExYMAA7NixA0uXLsW0adOU2w8fPoyvvvrqs0Ya5HI5Vq5cCR8fHzx79gyGhoaoXLkyhg4diiFDhuTpMdatW/dZGYiIClJ4fBp+CwrHb4ERCIlOKrDHNdKTobq1iXJFgVq2pqhYtgR0WFypiMjlcixZsgTz5s2DQqFAtWrV4OfnV2yLLMAyW6wYGBhg+fLlGD58OEqVKlVgjzt//nz89NNPWL9+PerXr4/ExETcuHEDb968yfNjmJqaFlgeIqL8iE/NxLE7UTgcGI5rT+OU2/VkUrSuWhbdnG3RuqoF56iSxoqKikK/fv3g7+8P4O1A1/r16zXyQgiqYJnNo5SUlA/eJ5PJYGBgkKd9pVIpDA0NP7lvfr7x3Nzc8OjRIyxduhQrVqz44H6//vor5syZg0ePHsHa2hpjx47F5MmTP7j/kSNHMGrUKPTs2VO57VMTx48ePYo+ffpg48aN6Nu373vTDIiIikJ6lhz+wTE4HBSOsyExyJK//YRIIgEaOpZGN2dbdKhpDVMjXZGTEn0ehUIBNzc33Lt3D0ZGRti0aRP69+8vdqwiwTKbR8bGxh+8r2PHjjh69KjytoWFBVJTU3Pdt2XLljh79qzytoODA2JjY9/bLz8fyctkMixZsgR9+vTBuHHjUK5cuff2CQgIgIeHB+bNmwdPT09cvnwZo0aNQpkyZTBgwIBcH9fKygqnT5/GqFGjULZs2U/m2Lt3L0aMGIG9e/eic+fOKr8OIqLPIVcIuPL4NQ4HhePE3Sgk/esErKpWJfFVXVt0qWMDGzPDjzwKkWaRSqVYvnw5ZsyYAV9fX1StWlXsSEWGZbaY+eqrr+Ds7Iy5c+di69at792/Zs0atG3bFrNnzwYAODk54f79+1i5cuUHy+yaNWvw9ddfw8rKCjVq1ECTJk3QtWtXdOjQ4b19N2zYgJkzZ+L3339Hy5YtC/S1ERF9iCAIuBfxz4lcMf+6vKutmSG+dLZBN2dbVLEqKWJKooIVERGBR48eoUWLFgCATp06wd3dHTo62lXvtOvVfobk5OQP3ieT5ZxfFRMT88F9pdKcJwE8ffr0s3LlZvny5WjTpg2mTJny3n3BwcHo2rVrjm1NmzbF2rVrIZfL33stAFC9enXcvXsXAQEBuHTpEs6fP48uXbpgwIAB2LJli3K/AwcOICYmBpcuXYKrq2uBvy4iov96EZeKw4HhOBwUjsev/pm2ZWqoi061rdHN2Rb17UtBKtX8heGJ/u3EiRP45ptvkJWVhaCgINjb2wOA1hVZgGU2z1SZw1pY++ZVixYt4O7ujunTp39wtFVVUqkUrq6ucHV1xYQJE7B792588803mDlzpvIMybp16+LmzZvYtm0b6tevXyyuKkJEhU+hEHAu9BW2XgzDjWdxUGWWVUa2Qvnf+jpSuFWzRFdnG7SqYsE1W6lYys7OxuzZs7Fs2TIAgLOzM7Kz31/LWJuwzBZTy5Ytg7OzM6pUqZJje7Vq1XDp0qUc2y5dugQnJ6dcR2U/pHr16gBynsBWsWJFrF69Gq1atYJMJsP69es/4xUQUXGXniXHwZvh2HrxSY5RVVVIJEDTiubo6myD9jWtUNKAJ3JR8fXixQv07t1b+Xt81KhRWL16dY6T0LURy2wxVatWLfTt2xc//PBDju2TJ0+Gq6srFi5cCE9PT1y5cgXr16/Hxo0bP/hYX3/9NZo2bYomTZrAysoKYWFhmD59OpycnN6bYO7k5IQzZ86gVatW0NHR+eBFFIhIe8UkpWP3lWfY/fdzxKVkAgCM9XXQy9UOPevboYR+3v+wLqmvy5UISCscPXoU/fv3R1xcHExMTLBly5YcqwxpM5bZYmzBggXw9fXNsa1evXrw8/PDnDlzsHDhQlhbW2PBggUfnY7g7u6Offv2YenSpUhISICVlRXatGmDefPm5To3p0qVKjh9+rRyhHb16tUF/dKISAM9iErE1gth+C0oApnyt9MDbM0MMbCpAzxd7TiqSvQRR48eRVxcHOrXrw9fX19UqFBB7EhqQyJo2WWZEhMTYWpqioSEBJiYmOS4Lz09HWFhYXB0dNT6IXttx+8FooIhCP/Mh73w8J9lCOuWN8OQZhXgXsOSV8ciyoP09HT88MMPGD9+PPT19cWOU+g+1tf+iyOzRERU4NKz5DgcGI6tF8PwMObtajBSCdChpjUGNXOEi33BXaWQqDg6fPgwdu/eDV9fX+XFmaZOnSp2LLXEMktERAUmNjkDu648w+6rz/D6X/NhPV3tMKCJA+xKG4mckEi9ZWRkYOrUqcpzXrZu3Yphw4aJnEq9scwSEVGudl55ip1XnkGhwmy0l2/SkJmdcz6sh6sdTDgfluiTHj9+DE9PTwQEBAAApkyZgoEDB4qcSv2xzBIR0Xuev07Foj+ClSdqqaKOnRmGNndE+xpWnA9LlEe//PILhgwZgsTERJQuXRo7d+5Ep06dxI6lEVhmc6Fl58RRLvg9QNpu+fEHyJQr0LhCGUz8winPx5kZ6aKyhTEvmkKkgqVLl2LGjBkA3l6Vc9++fbCzsxM5leZgmf0XXd23H4OlpqbC0NBQ5DQkptTUVAD/fE8QaZMbT+Nw9E4kpBJg7pfVUdXq42cSE9Hn6dy5MxYtWoTx48djwYIFWnlJ2s/B/7f+RSaTwczMDDExMQAAIyMjji5oGUEQkJqaipiYGJiZmal0VTSi4kChELDwaDAAwNPVjkWWqJCEhobCyentpx61atXCo0ePYG1tLXIqzcQy+x9WVlYAoCy0pJ3MzMyU3wtE2uT32xG49SIeJfRkKk0vIKK8SUtLw/jx47F9+3ZcuHABjRo1AgAW2c/AMvsfEokE1tbWsLCwQFZWlthxSAS6urockSWtlJ4lx4rjIQCAka0qwqIkLxhCVJCCg4Ph4eGBu3fvQiKR4Nq1a8oyS/nHMvsBMpmMhYaItMrWi2EIj0+DjakBhjTnpTKJCtKOHTswatQopKamwtLSEnv27EHbtm3FjlUscM0UIiLCq6QMbDzzCAAwtX1VGOjyj3migpCSkoIBAwZgwIABSE1NRdu2bREUFMQiW4BYZomICGtOhiIlU4465UzxZR0bseMQFRv79+/Hjh07IJVKsXDhQpw4cYLnZBQwTjMgItJyIVFJ8L3+HAAwq3N1SKVcxYWooAwaNAjXrl1Dnz590LJlS7HjFEscmSUi0nKLjwVDIQAdalrB1aG02HGINFpSUhKmTp2KpKQkAG9PLP/pp59YZAsRR2aJiLTY2ZAYnA99BV2ZBNM6VBU7DpFGu3XrFjw8PBAaGoro6Gjs2LFD7EhagSOzRERaKluuwOL/XyBhQBMH2JcpIXIiIs0kCAK8vb3RsGFDhIaGoly5chg2bJjYsbQGR2aJiLSU740XeBiTjFJGuhjTprLYcYg0UkJCAoYNGwY/Pz8Aby9N6+PjgzJlyoicTHuwzBIRaaGk9Cys+SsUADC+bWWYGuqKnIhI89y7dw9du3bF48ePoaOjg+XLl2PixImQSHgSZVFimSUi0kIbzz7G65RMVDAvgb6N7MWOQ6SRzM3NkZycDHt7e/j6+qJhw4ZiR9JKLLNERFrmRVwqtl4MAwDM6FgNujKePkGUV2lpaTA0NAQAWFpa4tixY3B0dESpUqVETqa9+BOMiEjLrDwRgsxsBZpULIO21SzEjkOkMf7++29Uq1YN+/fvV26rV68ei6zIWGaJiLTIzedvcORWBCQSYGanapzbR5QHgiBgzZo1aNasGZ49e4bly5dDoVCIHYv+j2WWiEhLCIKARX/cBwB8Xa8catiYipyISP29fv0aX375JSZPnozs7Gz07NkTZ8+ehVTKCqUu+E4QEWmJo3cicfN5PAx1ZZjiXkXsOERq7/Lly6hbty7++OMP6OvrY9OmTfD19YWpKf8QVCc8AYyISAukZ8mx7M8HAIARLSvC0sRA5ERE6i0sLAwtW7ZEdnY2KleuDD8/Pzg7O4sdi3LBMktEpAV2XH6Kl2/SYGmij6EtHMWOQ6T2HB0dMX78eERGRsLb2xslS5YUOxJ9AMssEVEx9zo5A+tPPwIAfOteFUZ6/NFPlJtz587B0dER5cuXBwAsX74cUqmUJ0qqOc6ZJSIq5taeeoikjGzUtDVB97q2YschUjtyuRwLFy5EmzZt0KtXL2RlZQEAZDIZi6wG4J/nRETF2KOYJOy99hwAMLNjdUil/MVM9G/R0dHo27cv/P39AQBOTk7IysqCri4v8awpWGaJiIqxJcceQK4Q8EV1SzSuWEbsOERq5fTp0+jTpw+io6NhZGSEjRs3wsvLS+xYpCKWWSKiIhKTlI5Lj2IhL6K11qMT03H6QQx0pBJM71C1aJ6USAPI5XIsWLAACxcuhCAIqFmzJnx9fVG9enWxo1E+sMwSERWBP25HYMbBO0hMzy7y5/6msT0qlDUu8uclUldZWVk4fPgwBEHAkCFDsG7dOhgZGYkdi/KJZZaIqBAlZ2Rj3pF7OBDwEgBQycIYtmaGRfb8ZYz1MMHNqciej0gTGBgYwM/PDwEBAejTp4/YcegzscwSERWSwOdvMH5/EJ7HpUIiAUa3qoTxbpWhK+NCMkRFKTs7G7Nnz0aJEiUwa9YsAECVKlVQpQqvhFccsMwSERUwuULAxjOPsNb/IeQKAbZmhljjUQcNK/AELKKi9uLFC/Tu3RuXLl2CVCqFp6cnKleuLHYsKkAss0REBehFXCom+QXh+tM3AIAudWywqFtNmBpymR+ionb06FH0798fcXFxMDExwebNm1lkiyGWWSKiAvJbUDhmHbqLpIxsGOvrYEHXGviqri0XXScqYllZWZgxYwZWrVoFAHBxcYGvry8qVqwocjIqDCyzRESfKTE9C3N/u4dDgeEAgHrlzbDWsy7Kl+HZ0URFTRAEuLu748yZMwCAcePGYcWKFdDX1xc5GRUWllkios9w42kcJvgG4eWbNEglwNg2lTG2TSXo8CQvIlFIJBJ4enoiMDAQ27Ztw1dffSV2JCpkEkEQBLFDFKXExESYmpoiISEBJiYmYschIg2VLVfgx9OP8OPph1AIQLlShljXyxku9qXFjkakdTIyMvDy5UvlNAJBEBATEwNLS0uRk1F+qdLXODJLRKSi569TMcE3EDefxwMAute1xbyuNWBiwJO8iIrakydP4OHhgdjYWAQGBqJUqVKQSCQsslqEn4MREeWRIAg4ePMlOv5wATefx6Okvg7W9XLGGk9nFlkiERw4cAB169ZFQEAAkpKSEBoaKnYkEgFHZomI8iAhLQuzDt/F77ciAACuDqWwxsMZdqV5khdRUUtPT8fkyZOxceNGAEDTpk2xb98+2NnZiZyMxMAyS0T0CdfC4jDRNwjh8WmQSSWY0LYyRrWuBJmUS24RFbWHDx/Cw8MDQUFBAIBp06ZhwYIF0NXlpyPaimWWiOgDsuQKrDv1EBvPPoJCAOzLGGGtpzPqli8ldjQirTVnzhwEBQXB3Nwcu3btQvv27cWORCJjmSUiyoVcIWDErgD4P4gBAHztUg7zvqwBY33+2CQS0/r16yGRSLBy5UrY2tqKHYfUAE8AIyLKxeKjwfB/EAMDXSnW96mLVT3rsMgSiSA4OBhz587Fu5VEy5Qpg71797LIkhJ/MhMR/ceev59h26UwAMAaD2d0rGUtciIi7bRz506MHDkSqampqFixIvr37y92JFJDHJklIvqXiw9jMee3ewCAKe2cWGSJRJCSkoKBAwfCy8sLqampaNOmDdq1ayd2LFJTLLNERP/3+FUyRu0JgFwh4Ku6thjdupLYkYi0zt27d+Hq6gofHx9IpVIsWLAAf/31F6ysrMSORmqK0wyIiAC8ScnEYJ/rSEzPhot9KSztXgsSCZfeIipK+/btw+DBg5GWlgZra2vs3bsXrVq1EjsWqTmOzBKR1svMVmDE7gA8fZ2KcqUM8dM3LjDQlYkdi0jrWFhYID09He3atUNQUBCLLOUJR2aJSKsJgoBZh+/g77A4GOvrYNsAV5gb64sdi0hrpKSkoESJEgCAtm3b4ty5c2jatCmkUo63Ud7wO4WItNrmC0/gd+MlpBLgxz514WRZUuxIRFpBEAR4e3vD0dERjx49Um5v3rw5iyyphN8tRKS1Tt6PxtI/HwAAZneujtZVLERORKQdEhMT0atXL4wcORKvXr3CTz/9JHYk0mCil9kNGzbAwcEBBgYGaNiwIa5du/bR/deuXYsqVarA0NAQdnZ2mDhxItLT04soLREVF/ciEjB+fyAEAejXqDwGNHEQOxKRVggICEC9evXg5+cHHR0drFq1CsuXLxc7FmkwUcusr68vJk2ahLlz5+LmzZuoU6cO3N3dERMTk+v+e/fuxbRp0zB37lwEBwdj69at8PX1xYwZM4o4ORFpspjEdAzZcQOpmXI0r2yOuV1qcOUCokImCAJ+/PFHNGnSBI8fP4a9vT0uXLiAyZMnc1oBfRZRv3vWrFmDoUOHYuDAgahevTq8vb1hZGSEbdu25br/5cuX0bRpU/Tp0wcODg5o164devfu/cnRXCKid9Kz5Bi68wYiE9JRsWwJrO9TD7oy/iIlKmw+Pj4YN24cMjMz0a1bNwQGBqJRo0Zix6JiQLSf4JmZmQgICICbm9s/YaRSuLm54cqVK7ke06RJEwQEBCjL65MnT3Ds2DF07Njxg8+TkZGBxMTEHF9EpJ0UCgGT/W7h1ssElDLSxbYBrjA11BU7FpFW6Nu3L5o1a4Z169bh4MGDKFWqlNiRqJgQbWmu2NhYyOVyWFpa5thuaWmJBw8e5HpMnz59EBsbi2bNmkEQBGRnZ2PEiBEfnWawdOlSzJ8/v0CzE1HhuxeRgK0Xw3Dl8WsoBKFAHlOuEBCbnAldmQTe/VxgX6ZEgTwuEb1PEATs3bsXHh4e0NXVhZ6eHs6dO8cpBVTgNGqd2bNnz2LJkiXYuHEjGjZsiEePHmH8+PFYuHAhZs+enesx06dPx6RJk5S3ExMTYWdnV1SRiUgFCoWAs6Ex2HIhDJcfvy6U55BJJVjyVS00rFCmUB6fiIC4uDgMGDAAv//+O+7evYulS5cCAIssFQrRyqy5uTlkMhmio6NzbI+Ojv7g9Zdnz56Nb775BkOGDAEA1KpVCykpKRg2bBhmzpyZ6z8SfX196OtzAXQidZaWKcfBwJfYejEMT16lAHhbOjvWskbvBnYFOhWgrLE+LEwMCuzxiCiny5cvo1evXnjx4gX09PRQvnx5sSNRMSdamdXT04OLiwv8/f3RrVs3AIBCoYC/vz/GjBmT6zGpqanvFVaZ7O0lJ4UC+hiSiIpOTFI6dl15ht1Xn+FNahYAoKSBDvo0KI/+TRxga2YockIiyiuFQoGVK1di5syZkMvlqFy5Mvz8/ODs7Cx2NCrmRJ1mMGnSJHh5eaF+/fpo0KAB1q5di5SUFAwcOBAA0L9/f9ja2io/nujSpQvWrFmDunXrKqcZzJ49G126dFGWWiJSf8GRidh6MQxHgiKQKVcAAOxKG2JQU0f0rG8HY32NmgFFpPVevXoFLy8v/PnnnwCA3r1746effkLJkryiHhU+UX9jeHp64tWrV5gzZw6ioqLg7OyM48ePK08Ke/78eY6R2FmzZkEikWDWrFkIDw9H2bJl0aVLFyxevFisl0BEeaRQCDgX+gpbLj7BpUf/zIetb18KQ5o74ovqVpBJudYrkSaKi4vD+fPnYWBggB9//BGDBw/m2s1UZCSCln0+n5iYCFNTUyQkJMDExETsOETFXnqWHAdvhmPrxSd4/K/5sB1qWmFwM0fULc/leYiKg99++w0VKlRArVq1xI5CxYAqfY2f5RFRoTkQ8BJLjgUjLiUTAFBSXwe9GtjBq4kDypUyEjkdEeVXdHQ0vLy8MGPGDLRo0QIA0LVrV5FTkbZimSWiAicIAtb5P8TaUw8BAOVKGWJgU0d41C+Hkga8SAGRJvP390ffvn0RHR2NJ0+eIDg4mOetkKhYZomoQGXLFZh1+C72X38BABjbphLGt60MHV4ylkijyeVyLFiwAAsXLoQgCKhRowb8/PxYZEl0LLNEVGBSM7MxZm8gTj+IgVQCLOxWE30b2osdi4g+U0REBPr27YuzZ88CAAYPHowffvgBRkacLkTiY5klogLxOjkDg3yu49bLBBjoSvFj73r4orrlpw8kIrX24sULuLi44NWrVyhRogR++ukn9O3bV+xYREoss0T02Z69ToHXtmt4+joVpYx0scXLFS72XKWAqDgoV64cWrdujZCQEPj5+cHJyUnsSEQ5sMwS0We59SIeg3yu43VKJsqVMsSOQQ1Qsayx2LGI6DO8fPkSxsbGMDMzg0QiwZYtW6CjowNDQ16Vj9QPyyyRlkrPkuNIUAQuPoqFPL/LTQvA6QcxSMuSo4aNCbYPdIVFSYOCDUpERero0aPw8vJCq1at8Msvv0AikfBKXqTWWGaJtMzr5Azsvvocu64+RWxyZoE8ZvPK5tjUz4WXoSXSYFlZWZgxYwZWrVoFAAgLC0NCQgLMzMzEDUb0CfzNQ6QlHkYnYdulMPx6MxyZ2QoAgLWpATzq26GUUf7Xfi1trI/2Naygp8Olt4g01bNnz9CrVy9cvXoVADB27FisXLkS+vr6Iicj+jSWWaJiTBAEXHr0GlsuPsHZkFfK7bXLmWJwM0d0rGUNXa7/SqTVDh8+jIEDByI+Ph6mpqbYtm0bunfvLnYsojxjmSUqhjKy386H3XoxDA+ikgAAEgnQrrolBjerAFeHUpBIJCKnJCKxpaWlYdy4cYiPj0eDBg2wf/9+ODo6ih2LSCUss0TFSFxKJvZcfYYdV54hNjkDAGCkJ4NHfTsMaOIAB/MSIickInViaGiIffv24dChQ1iyZAn09PTEjkSkMokg5Pc0Zs2UmJgIU1NTJCQkwMTEROw4RAXiUUzy2/mwAS+R8f/5sFYmBhjQ1AG9XcvD9DPmxBJR8XLgwAFkZGTwwgek1lTpaxyZJfqXZ69T4HfjBbLlmvM3Xmh0Es78az5sTVsTDG1egfNhiSiH9PR0TJ48GRs3boShoSFcXV15AQQqFlhmif5PoRAweu9N3A1PFDuKyiQSwK2aJYY0c0QDx9KcD0tEOTx8+BCenp4IDAwEAIwbN45zY6nYYJkl+r9DgeG4G56Ikvo66N2wvNhx8sxIT4auzrZw5HxYIsrF/v37MXToUCQnJ8Pc3Bw7d+5Ehw4dxI5FVGBYZokApGZmY+WJEADA6DaVMKJlRZETERF9HkEQMGrUKHh7ewMAmjdvjn379sHW1lbkZEQFixPqiABsPh+GqMR02JoZYkATB7HjEBF9NolEAnNzc0gkEsyaNQunT59mkaViiSOzpPWiE9Phfe4xAGBah6ow0JWJnIiIKP+Sk5NhbGwMAJg7dy46duyIxo0bi5yKqPBwZJa03uq/QpCWJUfd8mboXNta7DhERPmSkpKCQYMGoVWrVsjIeLvOtI6ODossFXsss6TV7kUk4JeAlwCAWZ2qcxUAItJI9+7dQ4MGDbB9+3YEBgbi7NmzYkciKjIss6TVfjr3BIIAdK5tDRf7UmLHISJSiSAI2LZtG1xdXXH//n1YW1vD398f7u7uYkcjKjKcM0taS64QcC707cUGeNIXEWmapKQkjBw5Env27AEAtGvXDrt27YKFhYXIyYiKFkdmSWvdehmPhLQsmBjowNnOTOw4REQqGT58OPbs2QOZTIYlS5bgzz//ZJElrcSRWdJa5/5/CdjmlctCh5d9JSINs2jRIty+fRve3t5o1qyZ2HGIRMPf4KS13k0xaOFkLnISIqJPS0xMhJ+fn/J2hQoVcPv2bRZZ0nocmSWt9CYlE7dexgMAWjiVFTcMEdEn3Lx5Ex4eHnj8+DFMTU2VJ3hJpRyTIuK/AtJKFx/FQhCAKpYlYW1qKHYcIqJcCYKA9evXo3Hjxnj8+DHKly8PU1NTsWMRqRWOzJJWejfFoGUVjsoSkXqKj4/H4MGDcfDgQQDAl19+ie3bt6N06dIiJyNSLxyZJa0jCP8sydWSUwyISA1dv34d9erVw8GDB6Grq4u1a9fi8OHDLLJEueDILGmd4MgkvErKgKGuDPUdeKEEIlI/wcHBCAsLg6OjI3x9feHq6ip2JCK1xTJLWufdqGyTimWgryMTOQ0R0VuCICgvqd2/f3+kpKSgd+/eMDMzEzcYkZrjNAPSOudCYwBwviwRqY/Lly+jadOmiI2NVW4bOXIkiyxRHrDMklZJzsjGjadvAHC+LBGJT6FQYMWKFWjRogWuXLmCWbNmiR2JSONwmgFplcuPYpGtEGBfxgj2ZUqIHYeItNirV6/g5eWFP//8EwDQq1cvrFixQuRURJqHZZa0yvG7UQA4KktE4jp//jx69+6NiIgIGBgY4IcffsCQIUOUc2aJKO9YZklrPIhKxOGgcABAV2dbkdMQkbY6fPgwevToAYVCgSpVqsDPzw+1a9cWOxaRxmKZJa0gCAIWHw2GQgA61rKCiz2X5CIicbRu3RoODg5o2rQpNm7cCGNjY7EjEWk0llnSCmdDX+HCw1joyaT4rn1VseMQkZa5ffs2atWqBYlEAlNTU1y7dg2lS5fmtAKiAsDVDKjYy5YrsPhoMABgQFMHnvhFREVGLpdj3rx5cHZ2xqZNm5Tby5QpwyJLVEA4MkvF3r7rL/AoJhmljHQxunUlseMQkZaIjIxE3759cebMGQDA3bt3RU5EVDyxzFKxlpiehbUnQwEAE9ycYGqoK3IiItIGJ0+eRL9+/RATE4MSJUrA29sb/fr1EzsWUbHEaQZUrG088xivUzJRoWwJ9GlYXuw4RFTMZWdnY9asWXB3d0dMTAxq166NGzdusMgSFSKWWSq2XsSlYtvFMADAzI7VoCvjtzsRFa7bt29j2bJlEAQBw4cPx9WrV1G1Kk86JSpMnGZAxdby4w+QKVegaaUyaFPVQuw4RKQF6tWrh5UrV8LGxgaenp5ixyHSChyqomIp4Nkb/HE7EhIJMLNjdZ41TESFIisrCzNmzEBwcLBy28SJE1lkiYoQyywVO4IgYNHR+wCAni7lUN3GRORERFQcPX/+HC1btsTSpUvh4eGBrKwssSMRaSWWWSp2/rgdicDn8TDSk2FyuypixyGiYujIkSNwdnbGlStXYGpqinnz5kFXl6ulEImBZZaKlfQsOZb9+QAAMKJlRViaGIiciIiKk8zMTEycOBFdu3bFmzdv4OrqisDAQPTo0UPsaERaiyeAUbFx+2U8fvB/iPD4NFiZGGBo8wpiRyKiYuTVq1fo1KkTrl+/DuDt3Nhly5ZBT09P5GRE2o1lljSaXCHgVHA0tl4Iw7WnccrtszpXg6GeTMRkRFTclCpVCgYGBihVqhR8fHzw5Zdfih2JiMAySxoqJSMbBwJeYtulMDx7nQoA0JFK8GUdGwxq5oiatqYiJySi4iAjIwMSiQR6enrQ0dHBvn37kJ2dDXt7e7GjEdH/scySRolMSMOOy8+w9+9nSEzPBgCYGuqib8Py6N/YAVamnCNLRAXj0aNH8PDwQMuWLfH9998DAGxtbUVORUT/xTJLGuFueAK2XHiCP25HIlshAAAcyhhhcDNH9HApByM9fisTUcHx9fXF0KFDkZSUhBcvXmDmzJkwNzcXOxYR5YINgNSWQiHA/0EMtlx4gr/D/pkP29CxNIY0r4C2VS0glfJiCERUcNLS0jBhwgT8/PPPAIDmzZtj7969LLJEaoxlltROamY2fg14iW2XniIsNgXA2/mwXerYYDDnwxJRIXnw4AE8PDxw584dSCQSzJgxA/PmzYOODn9VEqkz/gsltXLw5kvM//0+EtLeXknHxEAHfRvZw4vzYYmoEGVkZMDNzQ3h4eGwsLDA7t278cUXX4gdi4jy4LPKbHp6OgwMWDDo8wmCgA1nHmHVX6EAAPt382HrlUMJff7NRUSFS19fH99//z02bdqEPXv2wNraWuxIRJRHKl8BTKFQYOHChbC1tYWxsTGePHkCAJg9eza2bt1a4AGp+MuWKzDz8F1lkR3ZqiJOT26F/o0dWGSJqNDcu3cP58+fV97u2bMn/P39WWSJNIzKZXbRokXw8fHBihUrclz1pGbNmtiyZUuBhqPiLy1TjhG7b2Lv388hkQALutbAd+2rQsYTu4iokAiCgO3bt8PV1RVff/01IiMjlfdJJPzZQ6RpVC6zO3fuxM8//4y+fftCJvvnCkt16tTBgwcPCjQcFW9xKZnos+UqTgVHQ19Hik19XdC/sYPYsYioGEtOToaXlxcGDRqEtLQ0ODs75/hdRkSaR+XPcMPDw1GpUqX3tisUCmRlZRVIKCr+XsSlwmvbNTyJTYGpoS62etVHfYfSYsciomLs9u3b8PDwQEhICKRSKRYuXIhp06ZBKlV5XIeI1IjKZbZ69eq4cOHCe5fyO3DgAOrWrVtgwaj4uhuegAHbryM2OQO2ZobYMcgVlSxKih2LiIopQRCwefNmjB8/Hunp6bC1tcW+ffvQvHlzsaMRUQFQuczOmTMHXl5eCA8Ph0KhwMGDBxESEoKdO3fijz/+KIyMVIwEPHuD/lv/RkqmHNWsTeAz0BWWJlwRg4gKj0QiwaVLl5Ceno4OHTpg586dvAgCUTGi8mcrXbt2xe+//45Tp06hRIkSmDNnDoKDg/H7779zTT76pB/8HyIlU47GFcrAd3gjFlkiKjSCICj/e8OGDfD29sYff/zBIktUzEiEf/9r1wKJiYkwNTVFQkICTExMxI6jVdKz5Kgz/y9kZCvw18QWcLLk1AIiKniCIGDjxo04ffo0fvnlF86JJdJAqvQ1lf+FV6hQAa9fv35ve3x8PCpUqKDqw5EW+TssDhnZClibGqCyhbHYcYioGIqPj4eHhwfGjBmDgwcP4tChQ2JHIqJCpvKc2adPn0Iul7+3PSMjA+Hh4QUSioqncyGvAAAtncpyLUciKnDXr1+Hp6cnwsLCoKurixUrVqB79+5ixyKiQpbnMnvkyBHlf584cQKmpqbK23K5HP7+/nBwcCjQcFS8nH/4T5klIioogiBg3bp1mDp1KrKysuDg4AA/Pz+4urqKHY2IikCey2y3bt0AvD0r1MvLK8d9urq6cHBwwOrVqws0HBUfL9+k4lFMMmRSCZpU4skXRFRwxo0bh/Xr1wMAunfvjq1bt8LMzEzcUERUZPI8Z1ahUEChUKB8+fKIiYlR3lYoFMjIyEBISAg6d+5cmFlJg50PjQUA1LUzg6mhrshpiKg46d+/P4yNjbF+/XocOHCARZZIy6g8ZzYsLKwwclAxdy40BgCnGBDR51MoFLh9+zacnZ0BAK6urnj27BlKl+ZVBIm0Ub7WK0lJScGxY8fg7e2NH374IceXqjZs2AAHBwcYGBigYcOGuHbt2kf3j4+Px+jRo2FtbQ19fX04OTnh2LFj+XkZVESy5ApcevR2BYyWVVhmiSj/YmNj0aVLFzRq1AhBQUHK7SyyRNpL5ZHZwMBAdOzYEampqUhJSUHp0qURGxsLIyMjWFhYYNy4cXl+LF9fX0yaNAne3t5o2LAh1q5dC3d3d4SEhMDCwuK9/TMzM/HFF1/AwsICBw4cgK2tLZ49e8aPlNTczWdvkJyRjdIl9FDTxvTTBxAR5eLChQvo3bs3wsPDoa+vj5CQEOXoLBFpL5VHZidOnIguXbrgzZs3MDQ0xNWrV/Hs2TO4uLhg1apVKj3WmjVrMHToUAwcOBDVq1eHt7c3jIyMsG3btlz337ZtG+Li4nD48GE0bdoUDg4OaNmyJerUqaPqy6AidC707SoGLSqbQyrlklxEpBqFQoElS5agdevWCA8Ph5OTE65duwZPT0+xoxGRGlC5zAYFBWHy5MmQSqWQyWTIyMiAnZ0dVqxYgRkzZuT5cTIzMxEQEAA3N7d/wkilcHNzw5UrV3I95siRI2jcuDFGjx4NS0tL1KxZE0uWLMl13dt3MjIykJiYmOOLita7MsspBkSkqpiYGHTo0AEzZ86EXC5Hv379EBAQgNq1a4sdjYjUhMplVldXV3lpQAsLCzx//hwAYGpqihcvXuT5cWJjYyGXy2FpaZlju6WlJaKionI95smTJzhw4ADkcjmOHTuG2bNnY/Xq1Vi0aNEHn2fp0qUwNTVVftnZ2eU5I32+mKR03It4+wdE88oss0Skmt27d+Ovv/6CoaEhtm3bhp07d8LYmFcQJKJ/qDxntm7durh+/ToqV66Mli1bYs6cOYiNjcWuXbtQs2bNwsiopFAoYGFhgZ9//hkymQwuLi4IDw/HypUrMXfu3FyPmT59OiZNmqS8nZiYyEJbhC78f0mumrYmMDfWFzkNEWmaCRMm4PHjxxg1ahRq1KghdhwiUkMqj8wuWbIE1tbWAIDFixejVKlSGDlyJF69eoWffvopz49jbm4OmUyG6OjoHNujo6NhZWWV6zHW1tZwcnKCTCZTbqtWrRqioqKQmZmZ6zH6+vowMTHJ8UVFQxAEHAh4CYBLchFR3kRGRmLkyJFIS0sD8Hb62YYNG1hkieiDVB6ZrV+/vvK/LSwscPz48Xw9sZ6eHlxcXODv76+8uphCoYC/vz/GjBmT6zFNmzbF3r17oVAolFMdQkNDYW1tDT09vXzloMLjHxyDK09eQ09Hil6u5cWOQ0Rq7uTJk+jXrx9iYmKgo6ODH3/8UexIRKQB8rXObG5u3ryp8hXAJk2ahM2bN2PHjh0IDg7GyJEjkZKSgoEDBwJ4e1WX6dOnK/cfOXIk4uLiMH78eISGhuLo0aNYsmQJRo8eXVAvgwpIllyBJceCAQCDmznCrrSRyImISF1lZ2dj1qxZcHd3R0xMDGrVqsWf60SUZyqNzJ44cQInT56Enp4ehgwZggoVKuDBgweYNm0afv/9d7i7u6v05J6ennj16hXmzJmDqKgoODs74/jx48qTwp4/f64cgQUAOzs7nDhxAhMnTkTt2rVha2uL8ePH47vvvlPpeanw7bn6DE9iU1CmhB5GtaoodhwiUlPh4eHo3bs3Lly4AAAYNmwY1q5dC0NDQ5GTEZGmkAiCIORlx61bt2Lo0KEoXbo03rx5gzJlymDNmjUYO3YsPD09MX78eFSrVq2w8362xMREmJqaIiEhgfNnC0lCahZarTqDN6lZWNStJvo1shc7EhGpoUuXLqFbt26IjY2FsbExNm/ejF69eokdi4jUgCp9Lc/TDNatW4fly5cjNjYWfn5+iI2NxcaNG3Hnzh14e3trRJGlorH+zEO8Sc1CZQtj9HLlyhFElLvy5ctDoVCgbt26uHnzJossEeVLnkdmS5QogXv37sHBwQGCIEBfXx9nzpxB06ZNCztjgeLIbOF69joFbmvOIUsuwGegK1pVef+yxESkvRISEmBq+s9lrW/duoUqVarAwMBAxFREpG4KZWQ2LS0NRkZvT+KRSCTQ19dXLtFF9M6yPx8gSy6geWVzFlkiyuH3339HhQoVcOTIEeW2OnXqsMgS0WdR6QSwLVu2KK+8kp2dDR8fH5ibm+fYZ9y4cQWXjjTK9adx+PNuFKQSYGYnTjshorcyMzMxffp0rFmzBgCwceNGfPnllyKnIqLiIs/TDBwcHCCRSD7+YBIJnjx5UiDBCgunGRQOhULAVxsv4dbLBPRuUB5Lu9cSOxIRqYGwsDD06tUL165dA/D2il7Lly/n2uBE9FGq9LU8j8w+ffr0c3NRMXbkVgRuvUxACT0ZJn3hJHYcIlIDBw8exKBBg5CQkAAzMzP4+Piga9euYsciomJG5SuAEf1XepYcK44/AACMal0JZUvqi5yIiMQWGBiIHj16AAAaNWqE/fv3w96ey/QRUcFjmaXPtvViGCIS0mFjaoDBzRzFjkNEaqBu3boYOXIkjI2NsXjxYujq6oodiYiKKZZZ+iwxSenYeOYRAOC7DlVhoCsTORERieXAgQNo1qwZrKysAAAbNmz45LkWRESfK89LcxHl5vuToUjJlKOOnRm61LYROw4RiSAtLQ0jRoxAz5490bdvX8jlcgBgkSWiIsGRWcq3B1GJ8L3+AgAwu1M1SKX8xUWkbUJCQuDh4YHbt29DIpGgUaNGyOMiOUREBSJfI7OPHz/GrFmz0Lt3b8TExAAA/vzzT9y7d69Aw5H6EgQBi48GQyEAHWtZob5DabEjEVER27NnD1xcXHD79m2ULVsWx48fx+LFi6Gjw3ESIio6KpfZc+fOoVatWvj7779x8OBBJCcnA3h7ScK5c+cWeEBST2dDX+HCw1joyaT4rn1VseMQURFKTU3FkCFD0K9fP6SkpKBVq1YICgpCu3btxI5GRFpI5TI7bdo0LFq0CCdPnsyx6HWbNm1w9erVAg1H6ilbrsDio8EAgAFNHWBfpoTIiYioKCkUCly6dAkSiQRz587FqVOnYGPDOfNEJA6VPwu6c+cO9u7d+952CwsLxMbGFkgoUm/7rr/Ao5hklDLSxejWlcSOQ0RFRBAESCQSGBsbw8/PDzExMWjbtq3YsYhIy6k8MmtmZobIyMj3tgcGBsLW1rZAQpH6SkzPwvcnQwEAE9ycYGrItSOJirvk5GR4eXnh+++/V26rVasWiywRqQWVy2yvXr3w3XffISoqChKJRPlx05QpU9C/f//CyEhqZOOZx4hLyUSFsiXQp2F5seMQUSG7c+cOXF1dsXPnTsycORPR0dFiRyIiykHlMrtkyRJUrVoVdnZ2SE5ORvXq1dGiRQs0adIEs2bNKoyMpCZexKVi28UwAMDMjtWgK+MyxUTFlSAI2Lx5Mxo0aIAHDx7AxsYGJ06cgKWlpdjRiIhyUHnOrJ6eHjZv3ozZs2fj7t27SE5ORt26dVG5cuXCyEdqZPnxB8iUK9CkYhm0qWohdhwiKiSJiYkYPnw49u/fDwBo3749du7cibJly4qcjIjofSqX2YsXL6JZs2YoX748ypfnx8zaIuDZG/xxOxISCTCzUzVe2YeomMrKykLjxo1x//59yGQyLFmyBFOmTIFUyk9iiEg9qfzTqU2bNnB0dMSMGTNw//79wshEakYQBCw6+va97ulSDjVsTEVORESFRVdXF4MHD4adnR3Onz+PqVOnssgSkVpT+SdUREQEJk+ejHPnzqFmzZpwdnbGypUr8fLly8LIR2rgj9uRCHweDyM9GSa3qyJ2HCIqYAkJCXj48KHy9sSJE3Hnzh00adJExFRERHmjcpk1NzfHmDFjcOnSJTx+/Bg9e/bEjh074ODggDZt2hRGRhJRepYcy/58AAAY3qIiLE0MRE5ERAXpxo0bqFu3Ljp37oykpCQAgEQigakpP4EhIs3wWZ8dOTo6Ytq0aVi2bBlq1aqFc+fOFVQuUhPbLz1FeHwarEwMMLSFo9hxiKiACIKAdevWoUmTJggLC0NmZibCw8PFjkVEpLJ8l9lLly5h1KhRsLa2Rp8+fVCzZk0cPXq0ILORyGKTM7DxzCMAwLfuVWCkp/L5gkSkht68eYPu3btjwoQJyMrKwldffYXAwEBUrVpV7GhERCpTuZ1Mnz4d+/fvR0REBL744gusW7cOXbt2hZGRUWHkIxGtPRWKpIxs1LQ1wVd1eXU3ouLg6tWr6NWrF549ewY9PT2sXr0ao0eP5golRKSxVC6z58+fx7fffgsPDw+Ym5sXRiZSA6HRSdj793MAwKxO1SGV8hcdUXGwYMECPHv2DBUrVoSvry9cXFzEjkRE9FlULrOXLl0qjBykZpYcC4ZCANpVt0SjCmXEjkNEBWTbtm2YP38+li9fDhMTE7HjEBF9tjyV2SNHjqBDhw7Q1dXFkSNHPrrvl19+WSDBSDznQ1/hbMgr6EglmN6xmthxiOgzXLx4EX/99RcWLFgAALCyssKmTZtETkVEVHDyVGa7deuGqKgoWFhYoFu3bh/cTyKRQC6XF1Q2EoFcIWDx0WAAQP/GDnA0LyFyIiLKD4VCgeXLl2P27NmQy+WoV6/eR39+ExFpqjyVWYVCket/U/Hjd+MFQqKTYGqoi3FtK4kdh4jyISYmBt988w3++usvAEC/fv3g5uYmcioiosKh8tJcO3fuREZGxnvbMzMzsXPnzgIJReJIzsjG6r9CAADj2laGmZGeyImISFVnz56Fs7Mz/vrrLxgaGmLr1q3YuXMnjI2NxY5GRFQoVC6zAwcOREJCwnvbk5KSMHDgwAIJReLwPvsYscmZcChjhG8a2Ysdh4hU9P3336Nt27aIjIxEtWrVcP36dQwaNIjLbhFRsaZymRUEIdcfjC9fvuTlDzVYeHwaNl94AgCY3rEa9HQ+6+JwRCSCSpUqQaFQYMCAAbh+/Tpq1KghdiQiokKX56W56tatC4lEAolEgrZt20JH559D5XI5wsLC0L59+0IJSYVv5fEHyMhWoIFjabSrbil2HCLKo/j4eJiZmQEAunTpguvXr6N+/frihiIiKkJ5LrPvzoINCgqCu7t7jvlXenp6cHBwQI8ePQo8IBW+oBfxOBwUAQCY3ak6P5Ik0gDZ2dmYP38+vL29ERAQgPLlywMAiywRaZ08l9m5c+cCABwcHODp6QkDA4NCC0VFRxAELD56HwDQvZ4tapXjVBEidRceHo4+ffrg/PnzAIADBw5g0qRJIqciIhKHylcA8/LyKowcJJKDN8Nx/ekbGOhK8a17FbHjENEnHD9+HN988w1iY2NhbGyMzZs3o1evXmLHIiISTZ7KbOnSpREaGgpzc3OUKlXqox9Dx8XFFVg4Klx7/36OWYfvAACGtagIa1NDkRMR0YdkZWVhzpw5WLZsGQDA2dkZfn5+qFy5ssjJiIjElacy+/3336NkyZLK/+acSs0mCAK+PxmKH04/AgB41C+HcW14gQQidbZu3TplkR09ejRWrVrF6V5ERAAkgiAIYocoSomJiTA1NUVCQgJMTEzEjlPksuQKzDx0B343XgJ4e3GEiW6V+QcKkZpLS0uDu7s7xo0bh6+//lrsOEREhUqVvqbyYqI3b97EnTt3lLd/++03dOvWDTNmzEBmZqbqaanIpGRkY+jOG/C78RJSCbDkq1qY9IUTiyyRGsrMzIS3tzfkcjkAwNDQEOfOnWORJSL6D5XL7PDhwxEaGgoAePLkCTw9PWFkZIRffvkFU6dOLfCAVDBikzPQe/NVnA15BQNdKX7+pj76NCwvdiwiysXTp0/RvHlzjBw5EkuWLFFu5x+eRETvU7nMhoaGwtnZGQDwyy+/oGXLlti7dy98fHzw66+/FnQ+KgBPY1PQY9Nl3H6ZgFJGutg7tBHceGEEIrV06NAh1K1bF9euXYOZmRlq164tdiQiIrWm8tJcgiBAoVAAAE6dOoXOnTsDAOzs7BAbG1uw6eizhUYnoffPV/E6JRN2pQ2xY2ADVChr/OkDiahIZWRk4Ntvv8WPP/4IAGjUqBH2798Pe3t7kZMREak3lUdm69evj0WLFmHXrl04d+4cOnXqBAAICwuDpSVH+9SN99nHeJ2SiRo2Jvh1ZBMWWSI19PjxYzRt2lRZZKdMmYLz58+zyBIR5YHKI7Nr165F3759cfjwYcycOROVKr1d0unAgQNo0qRJgQekz3M3IgEAMLmdEyxKchkfInWUnJyMu3fvonTp0ti5c6dykICIiD6twJbmSk9Ph0wmg66ubkE8XKHRpqW50rPkqDH3BOQKAVent4WVKcsskboQBCHHCV2//fYb6tWrBzs7OxFTERGph0JdmuudgIAA7N69G7t378bNmzdhYGCg9kVW24RGJ0GuEFC6hB4sTfTFjkNE/xcaGoqGDRvi2rVrym1du3ZlkSUiygeVpxnExMTA09MT586dg5mZGQAgPj4erVu3xv79+1G2bNmCzkj5dD8iEQBQ3dqES/oQqYm9e/di+PDhSE5OxtixY3H16lX++yQi+gwqj8yOHTsWycnJuHfvHuLi4hAXF4e7d+8iMTER48aNK4yMlE/3I/9fZm2K93QKIk2QmpqKIUOGoG/fvkhOTkarVq1w+PBhFlkios+k8sjs8ePHcerUKVSrVk25rXr16tiwYQPatWtXoOHo8/x7ZJaIxBMcHAwPDw/cvXsXEokEc+bMwezZsyGTycSORkSk8VQuswqFIte5sbq6usr1Z0l8CoWAYI7MEonu3r17aNCgAVJTU2FpaYm9e/eiTZs2YsciIio2VJ5m0KZNG4wfPx4RERHKbeHh4Zg4cSLatm1boOEo/57HpSIlUw49HSkqmJcQOw6R1qpevTratGmDtm3bIigoiEWWiKiAqTwyu379enz55ZdwcHBQnnn74sUL1KxZE7t37y7wgJQ/7+bLVrUqCR1ZvhetIKJ8uHfvHuzt7WFsbAyJRIJ9+/bB0NCQ0wqIiAqBymXWzs4ON2/ehL+/P4KDgwEA1apVg5ubW4GHo/zjfFmioicIArZu3YqxY8fi66+/xs6dOyGRSGBszCvvEREVFpXKrK+vL44cOYLMzEy0bdsWY8eOLaxc9Jm4kgFR0UpKSsKIESOwd+9eAEBsbCwyMjJgYMCLlRARFaY8f/68adMm9O7dGzdu3MDDhw8xevRofPvtt4WZjT6D8uQvjswSFbqgoCC4uLhg7969kMlkWL58OY4ePcoiS0RUBPJcZtevX4+5c+ciJCQEQUFB2LFjBzZu3FiY2Sif4lIyEZmQDgCoyjJLVGgEQcCmTZvQqFEjPHz4EHZ2djh//jymTp0KqZRz1YmIikKef9o+efIEXl5eytt9+vRBdnY2IiMjCyUY5d+7UVn7MkYw1ld5WjQR5dGbN28wb948ZGRkoEuXLggMDESTJk3EjkVEpFXy3HQyMjJQosQ/SzxJpVLo6ekhLS2tUIJR/vHkL6KiUbp0aezZswd37tzBhAkTeDUvIiIRqDRsN3v2bBgZGSlvZ2ZmYvHixTA1NVVuW7NmTcGlo3y5z/myRIVCEAT8+OOPsLGxwddffw0AcHNz42ouREQiynOZbdGiBUJCQnJsa9KkCZ48eaK8zVEJ9aAcmeVKBkQF5s2bNxg0aBAOHz6MkiVLonHjxrC1tRU7FhGR1stzmT179mwhxqCCkp4lx6NXyQBYZokKyt9//w1PT088e/YMenp6WLJkCWxsbMSORUREyMflbEm9PYxOhlwhoJSRLqxMuCwQ0edQKBRYvXo1mjVrhmfPnqFixYq4fPkyxowZw0+iiIjUBE91L2buRyYAeDsqy1+2RPmXnZ2N7t274/fffwcAeHh4YPPmzTAx4SceRETqhCOzxczlx68BANWs+AuX6HPo6OigUqVK0NfXh7e3N/bv388iS0Skhlhmi5F7EQk4cisCANCxtrXIaYg0j0KhQHx8vPL2smXLcPPmTQwfPpyfdBARqSmW2WJCEAQsPhoMQQA617ZGvfKlxI5EpFFevXqFTp06oXPnzsjKygIA6OnpoXr16iInIyKij8lXmb1w4QL69euHxo0bIzw8HACwa9cuXLx4sUDDUd6dfhCDy49fQ09Hiu/aVxU7DpFGOXfuHJydnXH8+HHcvHkTgYGBYkciIqI8UrnM/vrrr3B3d4ehoSECAwORkZEBAEhISMCSJUsKPCB9WpZcgcXHggEAg5o6wq600SeOICIAkMvlWLhwIdq0aYOIiAhUq1YN165dQ4MGDcSORkREeaRymV20aBG8vb2xefNm6OrqKrc3bdoUN2/eLNBwlDf7rj3Hk1cpKF1CD6NaVxQ7DpFGiIqKgru7O+bMmQOFQoEBAwbg+vXrqFmzptjRiIhIBSovzRUSEoIWLVq8t93U1DTHiRNUNBLSsvD9yVAAwMQvnGBioPuJI4gIAPr37w9/f38YGRlh06ZN6N+/v9iRiIgoH1QembWyssKjR4/e237x4kVUqFAhXyE2bNgABwcHGBgYoGHDhrh27Vqejtu/fz8kEgm6deuWr+ctDjaceYQ3qVmoZGGM3q52Ysch0hg//PADGjdujICAABZZIiINpnKZHTp0KMaPH4+///4bEokEERER2LNnD6ZMmYKRI0eqHMDX1xeTJk3C3LlzcfPmTdSpUwfu7u6IiYn56HFPnz7FlClT0Lx5c5Wfs7h4/joVPpeeAgBmdqoGHRkXpyD6kIiICOzdu1d5u2rVqrh06RKqVuUJk0REmkzl9jNt2jT06dMHbdu2RXJyMlq0aIEhQ4Zg+PDhGDt2rMoB1qxZg6FDh2LgwIGoXr06vL29YWRkhG3btn3wGLlcjr59+2L+/Pn5Hg0uDpYff4BMuQLNK5ujlVNZseMQqa0TJ06gTp06+Oabb3D+/Hnldq4dS0Sk+VQusxKJBDNnzkRcXBzu3r2Lq1ev4tWrV1i4cKHKT56ZmYmAgAC4ubn9E0gqhZubG65cufLB4xYsWAALCwsMHjz4k8+RkZGBxMTEHF/FwY2ncTh6JxJSydtRWf5SJnpfdnY2pk+fjvbt2yM2Nha1a9eGlZWV2LGIiKgAqXwC2DsFsZh4bGws5HI5LC0tc2y3tLTEgwcPcj3m4sWL2Lp1K4KCgvL0HEuXLsX8+fM/K6e6USgELDz6dikuT1c7VOWla4ne8+LFC/Tu3RuXLl0CAIwaNQqrV6+GgYGByMmIiKggqVxmW7du/dFRwNOnT39WoI9JSkrCN998g82bN8Pc3DxPx0yfPh2TJk1S3k5MTISdnWafKPX77QjcehGPEnoyTPzCSew4RGrn6NGj6N+/P+Li4mBiYoItW7agZ8+eYsciIqJCoHKZdXZ2znE7KysLQUFBuHv3Lry8vFR6LHNzc8hkMkRHR+fYHh0dnetHgY8fP8bTp0/RpUsX5TaFQgEA0NHRQUhICCpWzLnOqr6+PvT19VXKpc7Ss+RYcTwEADCqdSVYlOQoE9F/PX/+HHFxcXBxcYGvr+97PxeIiKj4ULnMfv/997lunzdvHpKTk1V6LD09Pbi4uMDf31+5vJZCoYC/vz/GjBnz3v5Vq1bFnTt3cmybNWsWkpKSsG7dOo0fcc2L3VefITw+DTamBhjczFHsOERqQxAE5adGI0aMgKGhIXr37l2s/pglIqL3FdhaTv369fvoCgQfMmnSJGzevBk7duxAcHAwRo4ciZSUFAwcOBDA24XNp0+fDgAwMDBAzZo1c3yZmZmhZMmSqFmzJvT09Arq5aito3ciAbwdlTXQlYmchkg9HD58GPXr11deuEUikWDAgAEsskREWiDfJ4D915UrV/J1YoWnpydevXqFOXPmICoqCs7Ozjh+/LjypLDnz59DKuX6qQDwJiUTt17EAwDcqll+fGciLZCRkYHvvvsO69atAwCsXr06XyurEBGR5lK5zHbv3j3HbUEQEBkZiRs3bmD27Nn5CjFmzJhcpxUAwNmzZz96rI+PT76eUxNdfBQLhQBUtSoJK1POlSXt9vjxY3h6eiIgIAAAMGXKFMyZM0fkVEREVNRULrOmpqY5bkulUlSpUgULFixAu3btCiwYve9c6CsAQAteIIG03C+//IIhQ4YgMTERZcqUwY4dO9CpUyexYxERkQhUKrNyuRwDBw5ErVq1UKpUqcLKRLkQBEFZZluyzJIW+/nnnzF8+HAAQNOmTbF//36UK1dO5FRERCQWlSajymQytGvXTnmSBRWd4MgkvErKgKGuDPUd+IcEaa/u3bvDzs4O06dPx9mzZ1lkiYi0nMrTDGrWrIknT57A0ZHLQhWld6OyTSqWgb4OVzEg7XLlyhU0btwYwNv1qe/du4eSJUuKnIqIiNSByssELFq0CFOmTMEff/yByMhIJCYm5viiwnEuNAYA0LIKpxiQ9khLS8PQoUPRpEmTHCd7ssgSEdE7eR6ZXbBgASZPnoyOHTsCAL788sscl7V9t2C5XC4v+JRaLjkjGzeevgEAtKjMMkvaITg4GB4eHrh79y4kEgkiIyPFjkRERGooz2V2/vz5GDFiBM6cOVOYeSgXlx/FIlshwL6MERzMS4gdh6jQ7dy5EyNHjkRqaiosLS2xZ88etG3bVuxYRESkhvJcZgVBAAC0bNmy0MJQ7s4/5CoGpB1SUlIwZswY5ZQCNzc37N69W3kRFSIiov9Sac7sv6cVUNEQBAFnQ1hmSTvcuHEDO3bsgFQqxcKFC3NcDZCIiCg3Kq1m4OTk9MlCGxcX91mBKKew2BS8fJMGPZkUjSqUETsOUaFq2bIlVq1aBRcXF34KREREeaJSmZ0/f/57VwCjwvVuSS5Xx1Iooa/ySmpEai0pKQlTpkzB1KlTUbFiRQDApEmTRE5FRESaRKV21KtXL1hYWBRWFsrFw5hkAEC98rxQAhUvt27dgoeHB0JDQ3H79m1cvnyZU5mIiEhleZ4zy18y4tKRqrwkMJFaEgQB3t7eaNiwIUJDQ1GuXDmsWrWKP2OIiChfVF7NgIgovxISEjBs2DD4+fkBADp37gwfHx+UKcP54ERElD95LrMKhaIwcxBRMRcWFoYvvvgCjx8/ho6ODpYvX46JEydyRJaIiD4LzygioiJha2uLUqVKwd7eHr6+vmjYsKHYkYiIqBhgmSWiQhMfHw9jY2Po6OhAT08PBw8ehLGxMUqV4gmNRERUMHhWEREVimvXrqFu3bqYO3eucpudnR2LLBERFSiWWSIqUIIgYM2aNWjatCmePn0KPz8/pKSkiB2LiIiKKZZZIiowcXFx6Nq1KyZPnozs7Gz07NkTN27cQIkSJcSORkRExRTLLBEViMuXL8PZ2Rm///479PX1sWnTJvj6+vKqgUREVKh4AhgRfbaEhAR07NgRCQkJqFy5Mvz8/ODs7Cx2LCIi0gIss0T02UxNTbFu3Tr89ddf8Pb2RsmSJcWOREREWoJllojy5fz589DR0UGTJk0AAF5eXujfvz8vgkBEREWKc2aJSCVyuRyLFi1C69at4eHhgdjYWOV9LLJERFTUODJLRHkWHR2Nfv364dSpUwAANzc3GBoaipyKiIi0GcssEeXJ6dOn0adPH0RHR8PIyAgbN26El5eX2LGIiEjLcZoBEX2UQqHA3Llz4ebmhujoaNSsWRM3btxgkSUiIrXAMktEHyWRSHD//n0IgoAhQ4bg77//RrVq1cSORUREBIDTDIjoAxQKBaRSKSQSCbZs2QJPT098/fXXYsciIiLKgSOzRJRDdnY2pk+fjl69ekEQBABv15FlkSUiInXEkVkiUnrx4gV69+6NS5cuAQBGjx6Nli1bipyKiIjowzgyS0QAgKNHj8LZ2RmXLl2CiYkJ/Pz8WGSJiEjtscwSabmsrCx8++236Ny5M+Li4uDi4oKbN2+iZ8+eYkcjIiL6JE4zINJyvXv3xq+//goAGDduHFasWAF9fX2RUxEREeUNR2aJtNz48eNhbm6OQ4cOYd26dSyyRESkUTgyS6RlMjIyEBQUhIYNGwIAmjdvjqdPn6JEiRIiJyMiIlIdR2aJtMiTJ0/QtGlTtGnTBsHBwcrtLLJERKSpWGaJtMSBAwdQt25dBAQEwMDAAJGRkWJHIiIi+mwss0TFXHp6OkaPHo2ePXsiMTERTZo0QVBQENq0aSN2NCIios/GMktUjD18+BCNGzfGxo0bAQDTpk3D2bNnYWdnJ3IyIiKigsETwIiKsd27dyMoKAjm5ubYtWsX2rdvL3YkIiKiAsUyS1SMzZ49G0lJSZg8eTJsbW3FjkNERFTgOM2AqBh58OABvLy8kJGRAQDQ0dHBmjVrWGSJiKjY4sgsUTGxc+dOjBw5EqmpqbCzs8OiRYvEjkRERFToODJLpOFSUlIwcOBAeHl5ITU1FW3btsWYMWPEjkVERFQkWGaJNNi9e/fQoEED+Pj4QCqVYsGCBThx4gSsrKzEjkZERFQkOM2ASEP99ttv6N27N9LS0mBtbY19+/ahZcuWYsciIiIqUiyzRBqqZs2a0NXVRYsWLbBz505YWFiIHYmIiKjIscwSaZCYmBhlaa1YsSKuXr2KKlWqQCrljCEiItJO/A1IpAEEQYC3tzccHBxw8uRJ5fZq1aqxyBIRkVbjb0EiNZeQkIBevXph5MiRSEtLw969e8WOREREpDZYZonUWEBAAFxcXODn5wcdHR2sWrUKW7duFTsWERGR2uCcWSI1JAgC1q9fjylTpiAzMxP29vbYv38/GjVqJHY0IiIitcKRWSI1dPr0aYwbNw6ZmZno1q0bAgMDWWSJiIhywZFZIjXUtm1bDB06FDVr1sTYsWMhkUjEjkRERKSWWGaJ1IAgCNi0aRM8PDxgbm4OAPj5559FTkVERKT+OM2ASGSvX7/Gl19+idGjR2PAgAFQKBRiRyIiItIYHJklEtHly5fRq1cvvHjxAvr6+ujUqROnFBAREamAI7NEIlAoFFi+fDlatGiBFy9eoHLlyrh69SpGjhzJMktERKQCjswSFbHXr1+jX79+OH78OACgd+/e+Omnn1CyZEmRkxEREWkejswSFTGZTIaQkBAYGBhg8+bN2LNnD4ssERFRPnFklqgIKBQKSCQSSCQSmJmZ4cCBA9DV1UWtWrXEjkZERKTRODJLVMiio6Ph7u4Ob29v5bZ69eqxyBIRERUAllmiQnT69GnUqVMHp06dwqxZs5CUlCR2JCIiomKFZZaoEMjlcsydOxdubm6Ijo5GjRo1cOHCBc6NJSIiKmCcM0tUwCIiItC3b1+cPXsWADB48GD88MMPMDIyEjcYERFRMcQyS1SAkpOTUb9+fURGRqJEiRL46aef0LdvX7FjERERFVucZkBUgIyNjTF69GjUqVMHN2/eZJElIiIqZCyzRJ/p5cuXePjwofL2tGnTcPXqVTg5OYmYioiISDuwzBJ9hqNHj8LZ2Rk9evRAWloagLcXRTAwMBA5GRERkXZgmSXKh6ysLHz77bfo3LkzXr9+DV1dXcTFxYkdi4iISOuwzBKp6NmzZ2jRogVWrVoFABg7diwuX74MW1tbkZMRERFpH7Uosxs2bICDgwMMDAzQsGFDXLt27YP7bt68Gc2bN0epUqVQqlQpuLm5fXR/ooL022+/wdnZGVevXoWpqSl+/fVX/PDDD9DX1xc7GhERkVYSvcz6+vpi0qRJmDt3Lm7evIk6derA3d0dMTExue5/9uxZ9O7dG2fOnMGVK1dgZ2eHdu3aITw8vIiTk7ZRKBRYtWoV4uPj4erqisDAQHTv3l3sWERERFpN9DK7Zs0aDB06FAMHDkT16tXh7e0NIyMjbNu2Ldf99+zZg1GjRsHZ2RlVq1bFli1boFAo4O/vX8TJSdtIpVLs3bsXM2bMwMWLF+Ho6Ch2JCIiIq0napnNzMxEQEAA3NzclNukUinc3Nxw5cqVPD1GamoqsrKyULp06Vzvz8jIQGJiYo4vorw6cOAA5syZo7xtZ2eHxYsXQ09PT8RURERE9I6oZTY2NhZyuRyWlpY5tltaWiIqKipPj/Hdd9/BxsYmRyH+t6VLl8LU1FT5ZWdn99m5qfhLT0/H6NGj0bNnTyxcuBBnzpwROxIRERHlQvRpBp9j2bJl2L9/Pw4dOvTBdT2nT5+OhIQE5deLFy+KOCVpmocPH6JJkybYuHEjgLd/MDVr1kzkVERERJQbHTGf3NzcHDKZDNHR0Tm2R0dHw8rK6qPHrlq1CsuWLcOpU6dQu3btD+6nr6/PM80pz/bt24dhw4YhOTkZ5ubm2LVrF9q3by92LCIiIvoAUUdm9fT04OLikuPkrXcnczVu3PiDx61YsQILFy7E8ePHUb9+/aKISlpg8uTJ6NOnD5KTk9GiRQsEBQWxyBIREak50acZTJo0CZs3b8aOHTsQHByMkSNHIiUlBQMHDgQA9O/fH9OnT1fuv3z5csyePRvbtm2Dg4MDoqKiEBUVheTkZLFeAhUTDRs2hEQiwaxZs+Dv78+LIBAREWkAUacZAICnpydevXqFOXPmICoqCs7Ozjh+/LjypLDnz59DKv2nc2/atAmZmZn4+uuvczzO3LlzMW/evKKMTsVAdHS08nvNw8MDtWvXRtWqVUVORURERHklepkFgDFjxmDMmDG53nf27Nkct58+fVr4gajYS0lJwZgxY/Dnn38iKChIOUebRZaIiEiziD7NgKio3bt3Dw0aNICPjw9evXrFC24QERFpMJZZ0hqCIGDbtm1wdXXF/fv3YW1tDX9/f/Tt21fsaERERJRPajHNgKiwJScnY8SIEdizZw8AoF27dti1axcsLCxETkZERESfgyOzpBUWLVqEPXv2QCaTYcmSJfjzzz9ZZImIiIoBjsySVpg1axYCAgIwd+5cXs2LiIioGOHIrBoTBAGPY96un6unw7dKFYmJiVi9ejUEQQAAGBsb4+TJkyyyRERExQxHZtXYmZAY/B0WBz2ZFJ1qWYsdR2PcvHkTnp6eePToEYC3V/YiIiKi4onDfWoqS67A4qPBAICBTR1QvoyRyInUnyAIWL9+PRo3boxHjx6hfPnyaNq0qdixiIiIqBBxZFZN7b/2HI9fpaB0CT2Mal1J7DhqLz4+HoMHD8bBgwcBAF27dsW2bdtQunRpkZMRERFRYeLIrBpKTM/C96ceAgAmuFWGqaGuyInU240bN1C3bl0cPHgQurq6WLt2LQ4dOsQiS0REpAU4MquGNpx5hLiUTFQsWwK9G5QXO47aUygUePnyJRwdHeHr6wtXV1exIxEREVERYZlVMy/iUrH94lMAwMxO1aAr4+B5buRyOWQyGQCgQYMGOHToEJo1awYzMzNxgxEREVGRYlNSM3v+fo5MuQJNK5VB6ypc1D83ly9fRvXq1XHr1i3lts6dO7PIEhERaSGWWTWTlJ4FAGjgUAYSiUTkNOpFoVBgxYoVaNGiBUJDQzFjxgyxIxEREZHIOM2ANMKrV6/g5eWFP//8EwDQq1cv/PTTTyKnIiIiIrGxzJLau3DhAnr16oWIiAgYGBjghx9+wJAhQzhyTURERCyzpN4uXryIVq1aQaFQoEqVKvDz80Pt2rXFjkVERERqgmWW1Frjxo3RunVr2NjYYOPGjTA2NhY7EhEREakRlllSO5cuXUK9evVgaGgImUyG33//HYaGhmLHIiIiIjXE1QzUTHza29UMtHE6qFwux7x589C8eXNMnDhRuZ1FloiIiD6EI7NqJDQ6CX/eiQQANK1URuQ0RSsyMhJ9+vTB2bNnAQBZWVk5LoxARERElBuOzKqRxUeDoRCADjWt4GJfWuw4Reavv/5CnTp1cPbsWZQoUQK7du3C1q1bWWSJiIjok1hm1cS50Fc4F/oKujIJpnWoKnacIpGdnY2ZM2eiffv2ePXqFWrXro0bN26gX79+YkcjIiIiDcEyqway5QosPnofAODV2AH2ZUqInKhoxMTEwNvbG4IgYPjw4bh69SqqVtWOIk9EREQFg3Nm1YDfjZcIjU6GmZEuxrapLHacImNjY4OdO3ciKSkJvXr1EjsOERERaSCWWZElpWdhzckQAMCEtpVhaqQrcqLCk5WVhVmzZqFZs2bo0qULAKBTp04ipyIiIiJNxmkGIvO59BSxyZmoYF4CfRvZix2n0Dx//hwtW7bEihUrMGDAAMTHx4sdiYiIiIoBllmRnbgfBQAY0aoidGXF8+04cuQInJ2dceXKFZiammLz5s0wMzMTOxYREREVA8WzPWmIV0kZuBueCABoXcVC5DQFLzMzExMnTkTXrl3x5s0buLq6IjAwEN27dxc7GhERERUTnDMroouPXgEAatqaoGxJfZHTFKzU1FS0atUK169fBwBMnDgRy5Ytg56ensjJiIiIqDhhmRXRuZC3ZbalU1mRkxQ8IyMj1K1bF48ePYKPjw++/PJLsSMRERFRMcRpBiJRKAScfxgLAGjpVDymGKSnpyMuLk55e+3atQgKCmKRJSIiokLDMiuSuxEJiEvJhLG+DuqWNxM7zmd79OgRmjRpAg8PD8jlcgCAoaEhypcvL3IyIiIiKs5YZkXybopB00plNH4Vg/3796NevXoIDAxEUFAQHj9+LHYkIiIi0hKa3aI02LnQd/NlNXeKQVpaGoYPH47evXsjKSkJzZo1Q1BQEJycnMSORkRERFqCZVYECalZuPn8DQCghZO5yGnyJyQkBI0aNcLPP/8MiUSCmTNn4syZMyhXrpzY0YiIiEiLcDUDEVx6HAuFAFSyMEa5UkZix1GZIAjo27cvbt++jbJly2LPnj344osvxI5FREREWogjsyJ4N1+2RWXNXJJLIpFg69at6NChA27dusUiS0RERKJhmS1igiD8M1+2iuaU2Xv37mH37t3K23Xq1MGxY8dgbW0tYioiIiLSdpxmUMRCo5MRlZgOfR0pGjqWFjvOJwmCAB8fH4wePRrZ2dlwcnJCgwYNxI5FREREBIAjs0XuXGgMAKBRhTIw0JWJnObjkpOT4eXlhUGDBiEtLQ2tWrWCg4OD2LGIiIiIlFhmi9jzuFQAQO1ypiIn+bjbt2+jfv362LVrF6RSKRYvXozjx4/DwkJzlxIjIiKi4ofTDEQilUjEjvBBW7ZswZgxY5CRkQFbW1vs27cPzZs3FzsWERER0Xs4MkvvSUhIQEZGBjp06ICgoCAWWSIiIlJbHJklAEB2djZ0dN5+O0yaNAnly5dHjx49IJXy7x0iIiJSX2wqWk4QBGzYsAH169dHcnIygLfryPbs2ZNFloiIiNQe24oWi4+PR8+ePTFmzBjcunULW7duFTsSERERkUo4zUBLXb9+HZ6enggLC4Ouri5WrFiBcePGiR2LiIiISCUss1pGEASsW7cOU6dORVZWFhwcHODn5wdXV1exoxERERGpjNMMtMyiRYswceJEZGVloXv37ggMDGSRJSIiIo3FMqtlhg4divLly2P9+vU4cOAAzMzMxI5ERERElG+cZlDMKRQK+Pv744svvgAAWFlZISQkBAYGBiInIyIiIvp8HJktxmJjY9GlSxe0a9cOfn5+yu0sskRERFRccGS2mLpw4QJ69+6N8PBw6OvrIzU1VexIRERERAWOI7PFjEKhwJIlS9C6dWuEh4fDyckJ165dw4ABA8SORkRERFTgODJbjMTExKBfv344efIkAKBfv37YtGkTjI2NRU5GREREVDg4MluMXLt2DSdPnoShoSG2bduGnTt3ssgSERFRscaR2WKkc+fOWL16Ndzd3VGjRg2x4xAREREVOo7MarDIyEh8/fXXePHihXLbpEmTWGSJiIhIa3BkVkOdPHkS/fr1Q0xMDJKTk3H8+HGxIxEREREVOY7Mapjs7GzMmjUL7u7uiImJQa1atbB27VqxYxERERGJgiOzhSw6MR27rjxDaqYcAHDj6Zt8P9bLly/Rp08fXLhwAQAwbNgwrF27FoaGhgWSlYiIiEjTsMwWsm2XwvDTuSfvbS9poNr/9UFBQXBzc8Pr169hbGyMzZs3o1evXgUVk4iIiEgjscwWstSMtyOy9e1LwdWxNIC3RbZnfTuVHsfJyQnW1tYoX748fH19Ubly5QLPSkRERKRpWGaLSNNK5pj4hZNKx0RGRsLS0hJSqRRGRkY4duwYypYtCwMDg0JKSURERKRZeAKYmjpy5Ahq1KiBpUuXKrfZ2dmxyBIRERH9C8usmsnMzMSkSZPQtWtXvHnzBn/88Qeys7PFjkVERESkllhm1UhYWBiaN2+O77//HgAwYcIEnDt3Djo6nA1CRERElBu2JDVx8OBBDBo0CAkJCTAzM4OPjw+6du0qdiwiIiIitcYyqwYiIiLQp08fZGRkoFGjRti/fz/s7e3FjkVERESk9lhm1YCNjQ3Wrl2Lx48fY8mSJdDV1RU7EhEREZFGYJkViZ+fHxwdHeHq6goAGDFihMiJiIiIiDQPTwArYmlpaRgxYgQ8PT3h6emJhIQEsSMRERERaSy1KLMbNmyAg4MDDAwM0LBhQ1y7du2j+//yyy+oWrUqDAwMUKtWLRw7dqyIkn6ekJAQNGrUCD/99BMkEgl69+6NEiVKiB2LiIiISGOJXmZ9fX0xadIkzJ07Fzdv3kSdOnXg7u6OmJiYXPe/fPkyevfujcGDByMwMBDdunVDt27dcPfu3SJOrpobp36Di4sLbt++jbJly+L48eNYvHgxl90iIiIi+gwSQRAEMQM0bNgQrq6uWL9+PQBAoVDAzs4OY8eOxbRp097b39PTEykpKfjjjz+U2xo1agRnZ2d4e3t/8vkSExNhamqKhIQEmJiYFNwL+YDpv9zEjwunIeXOSQBAq1atsHfvXlhbWxf6cxMRERFpIlX6mqgjs5mZmQgICICbm5tym1QqhZubG65cuZLrMVeuXMmxPwC4u7t/cP+MjAwkJibm+CpKMpkOFClvIJFIMHfuXJw6dYpFloiIiKiAiPoZd2xsLORyOSwtLXNst7S0xIMHD3I9JioqKtf9o6Kict1/6dKlmD9/fsEEzgd7c2O0HTEf9UomY94ID9FyEBERERVHxX7C5vTp0zFp0iTl7cTERNjZ2RXZ8w9tUQFDW1QosucjIiIi0iailllzc3PIZDJER0fn2B4dHQ0rK6tcj7GyslJpf319fejr6xdMYCIiIiJSK6LOmdXT04OLiwv8/f2V2xQKBfz9/dG4ceNcj2ncuHGO/QHg5MmTH9yfiIiIiIov0acZTJo0CV5eXqhfvz4aNGiAtWvXIiUlBQMHDgQA9O/fH7a2tli6dCkAYPz48WjZsiVWr16NTp06Yf/+/bhx4wZ+/vlnMV8GEREREYlA9DLr6emJV69eYc6cOYiKioKzszOOHz+uPMnr+fPnkEr/GUBu0qQJ9u7di1mzZmHGjBmoXLkyDh8+jJo1a4r1EoiIiIhIJKKvM1vUinqdWSIiIiJSjcasM0tERERE9DlYZomIiIhIY7HMEhEREZHGYpklIiIiIo3FMktEREREGotlloiIiIg0FsssEREREWksllkiIiIi0lgss0RERESksVhmiYiIiEhjscwSERERkcZimSUiIiIijcUyS0REREQaS0fsAEVNEAQAQGJioshJiIiIiCg373rau972MVpXZpOSkgAAdnZ2IichIiIioo9JSkqCqanpR/eRCHmpvMWIQqFAREQESpYsCYlEUujPl5iYCDs7O7x48QImJiaF/nxU8Pgeaj6+h5qP76Fm4/un+Yr6PRQEAUlJSbCxsYFU+vFZsVo3MiuVSlGuXLkif14TExP+A9ZwfA81H99Dzcf3ULPx/dN8RfkefmpE9h2eAEZEREREGotlloiIiIg0FstsIdPX18fcuXOhr68vdhTKJ76Hmo/voebje6jZ+P5pPnV+D7XuBDAiIiIiKj44MktEREREGotlloiIiIg0FsssEREREWksllkiIiIi0lgsswVgw4YNcHBwgIGBARo2bIhr1659dP9ffvkFVatWhYGBAWrVqoVjx44VUVL6EFXew82bN6N58+YoVaoUSpUqBTc3t0++51T4VP13+M7+/fshkUjQrVu3wg1In6TqexgfH4/Ro0fD2toa+vr6cHJy4s9TEan6/q1duxZVqlSBoaEh7OzsMHHiRKSnpxdRWvqv8+fPo0uXLrCxsYFEIsHhw4c/eczZs2dRr1496Ovro1KlSvDx8Sn0nLkS6LPs379f0NPTE7Zt2ybcu3dPGDp0qGBmZiZER0fnuv+lS5cEmUwmrFixQrh//74wa9YsQVdXV7hz504RJ6d3VH0P+/TpI2zYsEEIDAwUgoODhQEDBgimpqbCy5cvizg5vaPqe/hOWFiYYGtrKzRv3lzo2rVr0YSlXKn6HmZkZAj169cXOnbsKFy8eFEICwsTzp49KwQFBRVxchIE1d+/PXv2CPr6+sKePXuEsLAw4cSJE4K1tbUwceLEIk5O7xw7dkyYOXOmcPDgQQGAcOjQoY/u/+TJE8HIyEiYNGmScP/+feHHH38UZDKZcPz48aIJ/C8ss5+pQYMGwujRo5W35XK5YGNjIyxdujTX/T08PIROnTrl2NawYUNh+PDhhZqTPkzV9/C/srOzhZIlSwo7duworIj0Cfl5D7Ozs4UmTZoIW7ZsEby8vFhmRabqe7hp0yahQoUKQmZmZlFFpI9Q9f0bPXq00KZNmxzbJk2aJDRt2rRQc1Le5KXMTp06VahRo0aObZ6enoK7u3shJssdpxl8hszMTAQEBMDNzU25TSqVws3NDVeuXMn1mCtXruTYHwDc3d0/uD8Vrvy8h/+VmpqKrKwslC5durBi0kfk9z1csGABLCwsMHjw4KKISR+Rn/fwyJEjaNy4MUaPHg1LS0vUrFkTS5YsgVwuL6rY9H/5ef+aNGmCgIAA5VSEJ0+e4NixY+jYsWORZKbPp059RqfIn7EYiY2NhVwuh6WlZY7tlpaWePDgQa7HREVF5bp/VFRUoeWkD8vPe/hf3333HWxsbN77R01FIz/v4cWLF7F161YEBQUVQUL6lPy8h0+ePMHp06fRt29fHDt2DI8ePcKoUaOQlZWFuXPnFkVs+r/8vH99+vRBbGwsmjVrBkEQkJ2djREjRmDGjBlFEZkKwIf6TGJiItLS0mBoaFhkWTgyS/QZli1bhv379+PQoUMwMDAQOw7lQVJSEr755hts3rwZ5ubmYsehfFIoFLCwsMDPP/8MFxcXeHp6YubMmfD29hY7GuXB2bNnsWTJEmzcuBE3b97EwYMHcfToUSxcuFDsaKSBODL7GczNzSGTyRAdHZ1je3R0NKysrHI9xsrKSqX9qXDl5z18Z9WqVVi2bBlOnTqF2rVrF2ZM+ghV38PHjx/j6dOn6NKli3KbQqEAAOjo6CAkJAQVK1Ys3NCUQ37+HVpbW0NXVxcymUy5rVq1aoiKikJmZib09PQKNTP9Iz/v3+zZs/HNN99gyJAhAIBatWohJSUFw4YNw8yZMyGVcqxN3X2oz5iYmBTpqCzAkdnPoqenBxcXF/j7+yu3KRQK+Pv7o3Hjxrke07hx4xz7A8DJkyc/uD8Vrvy8hwCwYsUKLFy4EMePH0f9+vWLIip9gKrvYdWqVXHnzh0EBQUpv7788ku0bt0aQUFBsLOzK8r4hPz9O2zatCkePXqk/EMEAEJDQ2Ftbc0iW8Ty8/6lpqa+V1jf/WEiCELhhaUCo1Z9pshPOStm9u/fL+jr6ws+Pj7C/fv3hWHDhglmZmZCVFSUIAiC8M033wjTpk1T7n/p0iVBR0dHWLVqlRAcHCzMnTuXS3OJTNX3cNmyZYKenp5w4MABITIyUvmVlJQk1kvQeqq+h//F1QzEp+p7+Pz5c6FkyZLCmDFjhJCQEOGPP/4QLCwshEWLFon1ErSaqu/f3LlzhZIlSwr79u0Tnjx5Ivz1119CxYoVBQ8PD7FegtZLSkoSAgMDhcDAQAGAsGbNGiEwMFB49uyZIAiCMG3aNOGbb75R7v9uaa5vv/1WCA4OFjZs2MCluTTZjz/+KJQvX17Q09MTGjRoIFy9elV5X8uWLQUvL68c+/v5+QlOTk6Cnp6eUKNGDeHo0aNFnJj+S5X30N7eXgDw3tfcuXOLPjgpqfrv8N9YZtWDqu/h5cuXhYYNGwr6+vpChQoVhMWLFwvZ2dlFnJreUeX9y8rKEubNmydUrFhRMDAwEOzs7IRRo0YJb968KfrgJAiCIJw5cybX323v3jcvLy+hZcuW7x3j7Ows6OnpCRUqVBC2b99e5LkFQRAkgsDxfCIiIiLSTJwzS0REREQai2WWiIiIiDQWyywRERERaSyWWSIiIiLSWCyzRERERKSxWGaJiIiISGOxzBIRERGRxmKZJSIiIiKNxTJLRATAx8cHZmZmYsfIN4lEgsOHD390nwEDBqBbt25FkoeIqKiwzBJRsTFgwABIJJL3vh49eiR2NPj4+CjzSKVSlCtXDgMHDkRMTEyBPH5kZCQ6dOgAAHj69CkkEgmCgoJy7LNu3Tr4+PgUyPN9yLx585SvUyaTwc7ODsOGDUNcXJxKj8PiTUR5pSN2ACKigtS+fXts3749x7ayZcuKlCYnExMThISEQKFQ4NatWxg4cCAiIiJw4sSJz35sKyurT+5jamr62c+TFzVq1MCpU6cgl8sRHByMQYMGISEhAb6+vkXy/ESkXTgyS0TFir6+PqysrHJ8yWQyrFmzBrVq1UKJEiVgZ2eHUaNGITk5+YOPc+vWLbRu3RolS5aEiYkJXFxccOPGDeX9Fy9eRPPmzWFoaAg7OzuMGzcOKSkpH80mkUhgZWUFGxsbdOjQAePGjcOpU6eQlpYGhUKBBQsWoFy5ctDX14ezszOOHz+uPDYzMxNjxoyBtbU1DAwMYG9vj6VLl+Z47HfTDBwdHQEAdevWhUQiQatWrQDkHO38+eefYWNjA4VCkSNj165dMWjQIOXt3377DfXq1YOBgQEqVKiA+fPnIzs7+6OvU0dHB1ZWVrC1tYWbmxt69uyJkydPKu+Xy+UYPHgwHB0dYWhoiCpVqmDdunXK++fNm4cdO3bgt99+U47ynj17FgDw4sULeHh4wMzMDKVLl0bXrl3x9OnTj+YhouKNZZaItIJUKsUPP/yAe/fuYceOHTh9+jSmTp36wf379u2LcuXK4fr16wgICMC0adOgq6sLAHj8+DHat2+PHj164Pbt2/D19cXFixcxZswYlTIZGhpCoVAgOzsb69atw+rVq7Fq1Srcvn0b7u7u+PLLL/Hw4UMAwP/au/uQJr82DuDfZ4apcwZWkiNMSDeEslquUotovbjIGC6b5UAhM9F8QTOKMG2EloUKRi+CqGQjX6JIWmoIWWtB2YsKLbes2QtJ0ARFcmnuPH+EN7/ltJ/94Hme7bk+sD/Ouc917uvc/nN5PLerrKxES0sLmpqaYDKZoNVqERwc7HTep0+fAgA6OjowODiImzdvThuzd+9eWK1W3L9/n+sbGhpCW1sb1Go1AECv1yMpKQk5OTkwGo2oqqpCXV0diouL//YaBwYG0N7eDk9PT67Pbrdj6dKlaG5uhtFoRGFhIU6cOIGmpiYAQH5+PlQqFeRyOQYHBzE4OIioqChMTEwgJiYGAoEAer0eBoMBvr6+kMvlGB8f/9s5EULcDCOEEDeRnJzMPDw8GJ/P5z7x8fFOxzY3N7OFCxdy7draWrZgwQKuLRAIWF1dndPYlJQUdujQIYc+vV7PeDweGxsbcxrz6/xms5mJRCIWERHBGGNMKBSy4uJihxipVMoyMjIYY4xlZWUxmUzG7Ha70/kBsFu3bjHGGLNYLAwAe/nypcOY5ORkplAouLZCoWAHDhzg2lVVVUwoFLLJyUnGGGNbt25lJSUlDnPU19ezwMBApzkwxlhRURHj8XiMz+czLy8vBoABYOXl5TPGMMbY4cOH2Z49e2bMdereYrHY4Rl8//6deXt7s/b29lnnJ4S4LzozSwhxK1u2bMHly5e5Np/PB/Bzl/LMmTPo6+vDyMgIfvz4AZvNhm/fvsHHx2faPHl5eTh48CDq6+u5P5UvX74cwM8jCL29vdBqtdx4xhjsdjssFgvCwsKc5jY8PAxfX1/Y7XbYbDZs3LgR1dXVGBkZwefPnxEdHe0wPjo6Gj09PQB+HhHYvn07xGIx5HI5YmNjsWPHjn/0rNRqNVJTU3Hp0iXMnz8fWq0W+/btA4/H49ZpMBgcdmInJydnfW4AIBaL0dLSApvNhmvXrqG7uxtZWVkOYy5evIiamhp8+PABY2NjGB8fx+rVq2fNt6enB/39/RAIBA79NpsNb9++/YMnQAhxB1TMEkLcCp/PR0hIiEPfwMAAYmNjkZ6ejuLiYvj7++PRo0dISUnB+Pi406Ls1KlTSExMhE6nQ2trK4qKitDQ0IC4uDiMjo4iLS0N2dnZ0+KCgoJmzE0gEODFixfg8XgIDAyEt7c3AGBkZOS365JIJLBYLGhtbUVHRwdUKhW2bduGGzdu/DZ2Jrt37wZjDDqdDlKpFHq9HhUVFdz10dFRaDQaKJXKabFeXl4zzuvp6cn9DM6ePYtdu3ZBo9Hg9OnTAICGhgbk5+ejrKwMkZGREAgEOH/+PJ48eTJrvqOjo1i7dq3DLxFT/lde8iOE/OdRMUsIcXvPnz+H3W5HWVkZt+s4dT5zNiKRCCKRCLm5udi/fz9qa2sRFxcHiUQCo9E4rWj+HR6P5zTGz88PQqEQBoMBmzdv5voNBgPWrVvnMC4hIQEJCQmIj4+HXC7H0NAQ/P39HeabOp86OTk5az5eXl5QKpXQarXo7++HWCyGRCLhrkskEphMpjmv81cFBQWQyWRIT0/n1hkVFYWMjAxuzK87q56entPyl0gkaGxsREBAAPz8/P5RToQQ90EvgBFC3F5ISAgmJiZw4cIFvHv3DvX19bhy5cqM48fGxpCZmYnOzk68f/8eBoMBXV1d3PGBY8eO4fHjx8jMzER3dzfevHmD27dvz/kFsL86evQoSktL0djYCJPJhOPHj6O7uxs5OTkAgPLycly/fh19fX0wm81obm7GkiVLnH7RQ0BAALy9vdHW1oYvX75geHh4xvuq1WrodDrU1NRwL35NKSwsxNWrV6HRaPDq1Su8fv0aDQ0NKCgomNPaIiMjER4ejpKSEgBAaGgonj17hvb2dpjNZpw8eRJdXV0OMcHBwejt7YXJZMLXr18xMTEBtVqNRYsWQaFQQK/Xw2KxoLOzE9nZ2fj06dOcciKEuA8qZgkhbm/VqlUoLy9HaWkpVqxYAa1W6/BvrX7l4eEBq9WKpKQkiEQiqFQq7Ny5ExqNBgAQHh6OBw8ewGw2Y9OmTVizZg0KCwshFAr/OMfs7Gzk5eXhyJEjWLlyJdra2tDS0oLQ0FAAP48onDt3DhEREZBKpRgYGMDdu3e5nea/mjdvHiorK1FVVQWhUAiFQjHjfWUyGfz9/WEymZCYmOhwLSYmBnfu3MG9e/cglUqxYcMGVFRUYNmyZXNeX25uLqqrq/Hx40ekpaVBqVQiISEB69evh9VqddilBYDU1FSIxWJERERg8eLFMBgM8PHxwcOHDxEUFASlUomwsDCkpKTAZrPRTi0h/8f+xRhj/+0kCCGEEEII+RO0M0sIIYQQQlwWFbOEEEIIIcRlUTFLCCGEEEJcFhWzhBBCCCHEZVExSwghhBBCXBYVs4QQQgghxGVRMUsIIYQQQlwWFbOEEEIIIcRlUTFLCCGEEEJcFhWzhBBCCCHEZVExSwghhBBCXNa/Af/ZMFuDDq/2AAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}